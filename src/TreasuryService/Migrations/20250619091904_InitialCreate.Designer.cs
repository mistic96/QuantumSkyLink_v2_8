// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using TreasuryService.Data;

#nullable disable

namespace TreasuryService.Migrations
{
    [DbContext(typeof(TreasuryDbContext))]
    [Migration("20250619091904_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("TreasuryService.Data.Entities.AllocationRule", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Actions")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<string>("Conditions")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uuid");

                    b.Property<string>("Currency")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.Property<decimal?>("DefaultPercentage")
                        .HasColumnType("decimal(5,4)");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<DateTime?>("EffectiveFrom")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("EffectiveTo")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("ExecutionCount")
                        .HasColumnType("integer");

                    b.Property<TimeOnly?>("ExecutionTime")
                        .HasColumnType("time without time zone");

                    b.Property<decimal?>("FixedAmount")
                        .HasColumnType("decimal(18,8)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("LastExecuted")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("MaxExecutions")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("NextExecution")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Priority")
                        .HasColumnType("integer");

                    b.Property<int?>("RecurrenceInterval")
                        .HasColumnType("integer");

                    b.Property<string>("RecurrencePattern")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<bool>("RequiresApproval")
                        .HasColumnType("boolean");

                    b.Property<string>("RuleName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("RuleType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<decimal?>("ThresholdAmount")
                        .HasColumnType("decimal(18,8)");

                    b.Property<string>("TriggerCondition")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<decimal?>("TriggerValue")
                        .HasColumnType("decimal(18,8)");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("Priority");

                    b.HasIndex("RuleName")
                        .IsUnique();

                    b.HasIndex("RuleType");

                    b.HasIndex("Status");

                    b.ToTable("AllocationRules");
                });

            modelBuilder.Entity("TreasuryService.Data.Entities.FundAllocation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("AllocationDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<decimal>("AllocationPercentage")
                        .HasColumnType("decimal(5,4)");

                    b.Property<Guid>("AllocationRuleId")
                        .HasColumnType("uuid");

                    b.Property<string>("AllocationType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,8)");

                    b.Property<DateTime?>("ApprovedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("ApprovedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uuid");

                    b.Property<string>("Currency")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<DateTime?>("ExecutedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("ExecutionDetails")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<string>("FailureReason")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<bool>("IsRecurring")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("NextAllocationDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Priority")
                        .HasColumnType("integer");

                    b.Property<string>("RecurrencePattern")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("Reference")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<Guid>("SourceAccountId")
                        .HasColumnType("uuid");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<Guid>("TargetAccountId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("AllocationDate");

                    b.HasIndex("AllocationRuleId");

                    b.HasIndex("SourceAccountId");

                    b.HasIndex("Status");

                    b.HasIndex("TargetAccountId");

                    b.ToTable("FundAllocations");
                });

            modelBuilder.Entity("TreasuryService.Data.Entities.ReserveRequirement", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("AccountId")
                        .HasColumnType("uuid");

                    b.Property<int>("AlertCount")
                        .HasColumnType("integer");

                    b.Property<string>("AlertThreshold")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<bool>("AlertsEnabled")
                        .HasColumnType("boolean");

                    b.Property<string>("Authority")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<bool>("AutoAdjust")
                        .HasColumnType("boolean");

                    b.Property<decimal?>("BaseAmount")
                        .HasColumnType("decimal(18,8)");

                    b.Property<decimal?>("BufferAmount")
                        .HasColumnType("decimal(18,8)");

                    b.Property<decimal?>("BufferPercentage")
                        .HasColumnType("decimal(5,4)");

                    b.Property<string>("CalculationFrequency")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("CalculationMethod")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<string>("ComplianceNotes")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<string>("ComplianceStatus")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("CorrelationId")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uuid");

                    b.Property<string>("Currency")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.Property<decimal>("CurrentReserve")
                        .HasColumnType("decimal(18,8)");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<DateTime>("EffectiveDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<decimal>("Excess")
                        .HasColumnType("decimal(18,8)");

                    b.Property<DateTime?>("ExpiryDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("LastAlertSent")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("LastCalculated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Metadata")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<DateTime?>("NextCalculation")
                        .HasColumnType("timestamp with time zone");

                    b.Property<decimal?>("PenaltyAmount")
                        .HasColumnType("decimal(18,8)");

                    b.Property<decimal?>("PenaltyRate")
                        .HasColumnType("decimal(5,4)");

                    b.Property<string>("RegulatoryReference")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<decimal>("RequiredAmount")
                        .HasColumnType("decimal(18,8)");

                    b.Property<decimal?>("RequiredPercentage")
                        .HasColumnType("decimal(5,4)");

                    b.Property<string>("RequirementName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("RequirementType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("ReviewNotes")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<DateTime?>("ReviewedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("ReviewedBy")
                        .HasColumnType("uuid");

                    b.Property<decimal>("Shortfall")
                        .HasColumnType("decimal(18,8)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.HasIndex("Currency");

                    b.HasIndex("EffectiveDate");

                    b.HasIndex("RequirementType");

                    b.HasIndex("Status");

                    b.ToTable("ReserveRequirements");
                });

            modelBuilder.Entity("TreasuryService.Data.Entities.TreasuryAccount", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("AccountName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("AccountNumber")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("AccountType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<decimal>("AvailableBalance")
                        .HasColumnType("decimal(18,8)");

                    b.Property<decimal>("Balance")
                        .HasColumnType("decimal(18,8)");

                    b.Property<string>("BankName")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uuid");

                    b.Property<string>("Currency")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<string>("ExternalAccountId")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<decimal>("InterestRate")
                        .HasColumnType("decimal(5,4)");

                    b.Property<bool>("IsDefault")
                        .HasColumnType("boolean");

                    b.Property<decimal>("MaximumBalance")
                        .HasColumnType("decimal(18,8)");

                    b.Property<decimal>("MinimumBalance")
                        .HasColumnType("decimal(18,8)");

                    b.Property<bool>("RequiresApproval")
                        .HasColumnType("boolean");

                    b.Property<decimal>("ReservedBalance")
                        .HasColumnType("decimal(18,8)");

                    b.Property<string>("RoutingNumber")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("SwiftCode")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("AccountNumber")
                        .IsUnique();

                    b.HasIndex("AccountType");

                    b.HasIndex("Currency");

                    b.HasIndex("Status");

                    b.ToTable("TreasuryAccounts");
                });

            modelBuilder.Entity("TreasuryService.Data.Entities.TreasuryBalance", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("AccountId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("AsOfTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<decimal>("AvailableBalance")
                        .HasColumnType("decimal(18,8)");

                    b.Property<decimal?>("AverageBalance")
                        .HasColumnType("decimal(18,8)");

                    b.Property<decimal>("Balance")
                        .HasColumnType("decimal(18,8)");

                    b.Property<DateTime>("BalanceDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("BalanceType")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<decimal?>("ChangeAmount")
                        .HasColumnType("decimal(18,8)");

                    b.Property<string>("ChangeReason")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<string>("CorrelationId")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uuid");

                    b.Property<string>("Currency")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.Property<decimal>("DayChange")
                        .HasColumnType("decimal(18,8)");

                    b.Property<decimal?>("DayChangePercentage")
                        .HasColumnType("decimal(5,4)");

                    b.Property<decimal?>("ExternalBalance")
                        .HasColumnType("decimal(18,8)");

                    b.Property<string>("ExternalBalanceId")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<decimal?>("FeesCharged")
                        .HasColumnType("decimal(18,8)");

                    b.Property<decimal?>("HighestBalance")
                        .HasColumnType("decimal(18,8)");

                    b.Property<decimal?>("InterestEarned")
                        .HasColumnType("decimal(18,8)");

                    b.Property<bool>("IsReconciled")
                        .HasColumnType("boolean");

                    b.Property<decimal?>("LowestBalance")
                        .HasColumnType("decimal(18,8)");

                    b.Property<string>("Metadata")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<decimal>("PendingCredits")
                        .HasColumnType("decimal(18,8)");

                    b.Property<decimal>("PendingDebits")
                        .HasColumnType("decimal(18,8)");

                    b.Property<decimal?>("PreviousBalance")
                        .HasColumnType("decimal(18,8)");

                    b.Property<DateTime?>("ReconciledAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("ReconciledBy")
                        .HasColumnType("uuid");

                    b.Property<string>("ReconciliationNotes")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<string>("ReconciliationReference")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<decimal>("ReservedBalance")
                        .HasColumnType("decimal(18,8)");

                    b.Property<int>("TransactionCount")
                        .HasColumnType("integer");

                    b.Property<Guid?>("TransactionId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uuid");

                    b.Property<decimal?>("VarianceAmount")
                        .HasColumnType("decimal(18,8)");

                    b.Property<string>("VarianceReason")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.HasIndex("BalanceDate");

                    b.HasIndex("BalanceType");

                    b.HasIndex("Currency");

                    b.ToTable("TreasuryBalances");
                });

            modelBuilder.Entity("TreasuryService.Data.Entities.TreasuryTransaction", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("AccountId")
                        .HasColumnType("uuid");

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,8)");

                    b.Property<string>("ApprovalNotes")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<DateTime?>("ApprovedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("ApprovedBy")
                        .HasColumnType("uuid");

                    b.Property<decimal>("BalanceAfter")
                        .HasColumnType("decimal(18,8)");

                    b.Property<decimal>("BalanceBefore")
                        .HasColumnType("decimal(18,8)");

                    b.Property<string>("CancellationReason")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<string>("CorrelationId")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("CounterpartyAccount")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("CounterpartyName")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uuid");

                    b.Property<string>("Currency")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<decimal?>("ExchangeRate")
                        .HasColumnType("decimal(18,8)");

                    b.Property<string>("ExternalTransactionId")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("FailureReason")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<decimal?>("FeeAmount")
                        .HasColumnType("decimal(18,8)");

                    b.Property<Guid?>("FundAllocationId")
                        .HasColumnType("uuid");

                    b.Property<string>("Metadata")
                        .HasMaxLength(2000)
                        .HasColumnType("character varying(2000)");

                    b.Property<decimal?>("OriginalAmount")
                        .HasColumnType("decimal(18,8)");

                    b.Property<string>("OriginalCurrency")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.Property<Guid?>("ParentTransactionId")
                        .HasColumnType("uuid");

                    b.Property<string>("PaymentMethod")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<DateTime?>("ProcessedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("ProcessedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("ProcessingDetails")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<string>("Reference")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("RejectionReason")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<Guid?>("RelatedAccountId")
                        .HasColumnType("uuid");

                    b.Property<bool>("RequiresApproval")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("SettledDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<DateTime>("TransactionDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("TransactionNumber")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("TransactionType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.HasIndex("FundAllocationId");

                    b.HasIndex("ParentTransactionId");

                    b.HasIndex("Reference");

                    b.HasIndex("RelatedAccountId");

                    b.HasIndex("Status");

                    b.HasIndex("TransactionDate");

                    b.HasIndex("TransactionNumber")
                        .IsUnique();

                    b.HasIndex("TransactionType");

                    b.ToTable("TreasuryTransactions");
                });

            modelBuilder.Entity("TreasuryService.Data.Entities.FundAllocation", b =>
                {
                    b.HasOne("TreasuryService.Data.Entities.AllocationRule", "AllocationRule")
                        .WithMany("FundAllocations")
                        .HasForeignKey("AllocationRuleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TreasuryService.Data.Entities.TreasuryAccount", "SourceAccount")
                        .WithMany("SourceAllocations")
                        .HasForeignKey("SourceAccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TreasuryService.Data.Entities.TreasuryAccount", "TargetAccount")
                        .WithMany("TargetAllocations")
                        .HasForeignKey("TargetAccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AllocationRule");

                    b.Navigation("SourceAccount");

                    b.Navigation("TargetAccount");
                });

            modelBuilder.Entity("TreasuryService.Data.Entities.ReserveRequirement", b =>
                {
                    b.HasOne("TreasuryService.Data.Entities.TreasuryAccount", "Account")
                        .WithMany("ReserveRequirements")
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Account");
                });

            modelBuilder.Entity("TreasuryService.Data.Entities.TreasuryBalance", b =>
                {
                    b.HasOne("TreasuryService.Data.Entities.TreasuryAccount", "Account")
                        .WithMany("BalanceHistory")
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Account");
                });

            modelBuilder.Entity("TreasuryService.Data.Entities.TreasuryTransaction", b =>
                {
                    b.HasOne("TreasuryService.Data.Entities.TreasuryAccount", "Account")
                        .WithMany("Transactions")
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TreasuryService.Data.Entities.FundAllocation", "FundAllocation")
                        .WithMany("Transactions")
                        .HasForeignKey("FundAllocationId");

                    b.HasOne("TreasuryService.Data.Entities.TreasuryTransaction", "ParentTransaction")
                        .WithMany("ChildTransactions")
                        .HasForeignKey("ParentTransactionId");

                    b.HasOne("TreasuryService.Data.Entities.TreasuryAccount", "RelatedAccount")
                        .WithMany("RelatedTransactions")
                        .HasForeignKey("RelatedAccountId");

                    b.Navigation("Account");

                    b.Navigation("FundAllocation");

                    b.Navigation("ParentTransaction");

                    b.Navigation("RelatedAccount");
                });

            modelBuilder.Entity("TreasuryService.Data.Entities.AllocationRule", b =>
                {
                    b.Navigation("FundAllocations");
                });

            modelBuilder.Entity("TreasuryService.Data.Entities.FundAllocation", b =>
                {
                    b.Navigation("Transactions");
                });

            modelBuilder.Entity("TreasuryService.Data.Entities.TreasuryAccount", b =>
                {
                    b.Navigation("BalanceHistory");

                    b.Navigation("RelatedTransactions");

                    b.Navigation("ReserveRequirements");

                    b.Navigation("SourceAllocations");

                    b.Navigation("TargetAllocations");

                    b.Navigation("Transactions");
                });

            modelBuilder.Entity("TreasuryService.Data.Entities.TreasuryTransaction", b =>
                {
                    b.Navigation("ChildTransactions");
                });
#pragma warning restore 612, 618
        }
    }
}

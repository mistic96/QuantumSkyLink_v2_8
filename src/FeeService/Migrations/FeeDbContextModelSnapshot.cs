// <auto-generated />
using System;
using FeeService.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace FeeService.Migrations
{
    [DbContext(typeof(FeeDbContext))]
    partial class FeeDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("FeeService.Data.Entities.DistributionRule", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Conditions")
                        .HasColumnType("jsonb");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("Currency")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<DateTime>("EffectiveFrom")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("EffectiveUntil")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("FeeType")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<decimal?>("MaximumAmount")
                        .HasColumnType("decimal(18,8)");

                    b.Property<decimal?>("MinimumAmount")
                        .HasColumnType("decimal(18,8)");

                    b.Property<decimal>("Percentage")
                        .HasColumnType("decimal(8,6)");

                    b.Property<int>("Priority")
                        .HasColumnType("integer");

                    b.Property<string>("RecipientId")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("RecipientType")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.HasKey("Id");

                    b.HasIndex("EffectiveFrom", "EffectiveUntil");

                    b.HasIndex("FeeType", "IsActive");

                    b.HasIndex("Priority", "IsActive");

                    b.ToTable("DistributionRules");
                });

            modelBuilder.Entity("FeeService.Data.Entities.ExchangeRate", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<decimal?>("Ask")
                        .HasColumnType("decimal(18,8)");

                    b.Property<decimal?>("Bid")
                        .HasColumnType("decimal(18,8)");

                    b.Property<decimal?>("Change24h")
                        .HasColumnType("decimal(8,6)");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("FromCurrency")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("Metadata")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<string>("Provider")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<decimal>("Rate")
                        .HasColumnType("decimal(18,8)");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("ToCurrency")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<decimal?>("Volume24h")
                        .HasColumnType("decimal(18,8)");

                    b.HasKey("Id");

                    b.HasIndex("IsActive");

                    b.HasIndex("Provider", "Timestamp");

                    b.HasIndex("FromCurrency", "ToCurrency", "Timestamp")
                        .IsUnique();

                    b.ToTable("ExchangeRates");
                });

            modelBuilder.Entity("FeeService.Data.Entities.FeeCalculationResult", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("AppliedRules")
                        .HasColumnType("jsonb");

                    b.Property<decimal>("BaseAmount")
                        .HasColumnType("decimal(18,8)");

                    b.Property<string>("BaseCurrency")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.Property<decimal>("CalculatedFee")
                        .HasColumnType("decimal(18,8)");

                    b.Property<string>("CalculationDetails")
                        .HasColumnType("jsonb");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<decimal?>("DiscountAmount")
                        .HasColumnType("decimal(18,8)");

                    b.Property<decimal?>("DiscountPercentage")
                        .HasColumnType("decimal(8,6)");

                    b.Property<string>("DiscountReason")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<Guid?>("ExchangeRateId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("FeeConfigurationId")
                        .HasColumnType("uuid");

                    b.Property<string>("FeeCurrency")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.Property<string>("FeeType")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<decimal>("FinalFeeAmount")
                        .HasColumnType("decimal(18,8)");

                    b.Property<string>("ReferenceId")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("ReferenceType")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<decimal?>("UsedExchangeRate")
                        .HasColumnType("decimal(18,8)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("ExchangeRateId");

                    b.HasIndex("FeeConfigurationId");

                    b.HasIndex("FeeType", "CreatedAt");

                    b.HasIndex("ReferenceId", "ReferenceType");

                    b.HasIndex("UserId", "CreatedAt");

                    b.ToTable("FeeCalculationResults");
                });

            modelBuilder.Entity("FeeService.Data.Entities.FeeConfiguration", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("CalculationType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("Currency")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<string>("DiscountRules")
                        .HasColumnType("jsonb");

                    b.Property<DateTime>("EffectiveFrom")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("EffectiveUntil")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("EntityId")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("EntityType")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("FeeType")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<decimal?>("FlatFeeAmount")
                        .HasColumnType("decimal(18,8)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<decimal?>("MaximumFee")
                        .HasColumnType("decimal(18,8)");

                    b.Property<decimal?>("MinimumFee")
                        .HasColumnType("decimal(18,8)");

                    b.Property<decimal?>("PercentageRate")
                        .HasColumnType("decimal(8,6)");

                    b.Property<string>("TieredStructure")
                        .HasColumnType("jsonb");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.HasKey("Id");

                    b.HasIndex("EffectiveFrom", "EffectiveUntil");

                    b.HasIndex("FeeType", "EntityType", "IsActive");

                    b.ToTable("FeeConfigurations");
                });

            modelBuilder.Entity("FeeService.Data.Entities.FeeDistribution", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,8)");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("Currency")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<Guid?>("DistributionRuleId")
                        .HasColumnType("uuid");

                    b.Property<string>("FailureReason")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<Guid>("FeeTransactionId")
                        .HasColumnType("uuid");

                    b.Property<string>("Metadata")
                        .HasColumnType("jsonb");

                    b.Property<decimal>("Percentage")
                        .HasColumnType("decimal(8,6)");

                    b.Property<DateTime?>("ProcessedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("RecipientId")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("RecipientType")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<Guid?>("SettlementId")
                        .HasColumnType("uuid");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("TransactionHash")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.HasKey("Id");

                    b.HasIndex("DistributionRuleId");

                    b.HasIndex("SettlementId");

                    b.HasIndex("FeeTransactionId", "RecipientType");

                    b.HasIndex("RecipientId", "Status");

                    b.HasIndex("Status", "CreatedAt");

                    b.ToTable("FeeDistributions");
                });

            modelBuilder.Entity("FeeService.Data.Entities.FeeTransaction", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,8)");

                    b.Property<Guid?>("CalculationResultId")
                        .HasColumnType("uuid");

                    b.Property<decimal?>("ConvertedAmount")
                        .HasColumnType("decimal(18,8)");

                    b.Property<string>("ConvertedCurrency")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("Currency")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<decimal?>("ExchangeRate")
                        .HasColumnType("decimal(18,8)");

                    b.Property<string>("FailureReason")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<Guid?>("FeeConfigurationId")
                        .HasColumnType("uuid");

                    b.Property<string>("Metadata")
                        .HasColumnType("jsonb");

                    b.Property<string>("PaymentMethod")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("PaymentReference")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<DateTime?>("ProcessedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("ReferenceId")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("ReferenceType")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("TransactionType")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("CalculationResultId");

                    b.HasIndex("FeeConfigurationId");

                    b.HasIndex("ReferenceId", "ReferenceType");

                    b.HasIndex("Status", "CreatedAt");

                    b.HasIndex("TransactionType", "CreatedAt");

                    b.HasIndex("UserId", "Status");

                    b.ToTable("FeeTransactions");
                });

            modelBuilder.Entity("FeeService.Data.Entities.Settlement", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Currency")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.Property<string>("DistributionIds")
                        .IsRequired()
                        .HasMaxLength(4000)
                        .HasColumnType("character varying(4000)");

                    b.Property<string>("FailureReason")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<string>("Metadata")
                        .HasColumnType("text");

                    b.Property<string>("Notes")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<DateTime?>("ProcessedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("ProcessedBy")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("SettlementMethod")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("SettlementReference")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<decimal>("TotalAmount")
                        .HasColumnType("decimal(18,8)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("Settlements");
                });

            modelBuilder.Entity("FeeService.Data.Entities.FeeCalculationResult", b =>
                {
                    b.HasOne("FeeService.Data.Entities.ExchangeRate", "ExchangeRate")
                        .WithMany("CalculationResults")
                        .HasForeignKey("ExchangeRateId");

                    b.HasOne("FeeService.Data.Entities.FeeConfiguration", "FeeConfiguration")
                        .WithMany("CalculationResults")
                        .HasForeignKey("FeeConfigurationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ExchangeRate");

                    b.Navigation("FeeConfiguration");
                });

            modelBuilder.Entity("FeeService.Data.Entities.FeeDistribution", b =>
                {
                    b.HasOne("FeeService.Data.Entities.DistributionRule", "DistributionRule")
                        .WithMany("FeeDistributions")
                        .HasForeignKey("DistributionRuleId");

                    b.HasOne("FeeService.Data.Entities.FeeTransaction", "FeeTransaction")
                        .WithMany("Distributions")
                        .HasForeignKey("FeeTransactionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FeeService.Data.Entities.Settlement", null)
                        .WithMany("Distributions")
                        .HasForeignKey("SettlementId");

                    b.Navigation("DistributionRule");

                    b.Navigation("FeeTransaction");
                });

            modelBuilder.Entity("FeeService.Data.Entities.FeeTransaction", b =>
                {
                    b.HasOne("FeeService.Data.Entities.FeeCalculationResult", "CalculationResult")
                        .WithMany("FeeTransactions")
                        .HasForeignKey("CalculationResultId");

                    b.HasOne("FeeService.Data.Entities.FeeConfiguration", "FeeConfiguration")
                        .WithMany("FeeTransactions")
                        .HasForeignKey("FeeConfigurationId");

                    b.Navigation("CalculationResult");

                    b.Navigation("FeeConfiguration");
                });

            modelBuilder.Entity("FeeService.Data.Entities.DistributionRule", b =>
                {
                    b.Navigation("FeeDistributions");
                });

            modelBuilder.Entity("FeeService.Data.Entities.ExchangeRate", b =>
                {
                    b.Navigation("CalculationResults");
                });

            modelBuilder.Entity("FeeService.Data.Entities.FeeCalculationResult", b =>
                {
                    b.Navigation("FeeTransactions");
                });

            modelBuilder.Entity("FeeService.Data.Entities.FeeConfiguration", b =>
                {
                    b.Navigation("CalculationResults");

                    b.Navigation("FeeTransactions");
                });

            modelBuilder.Entity("FeeService.Data.Entities.FeeTransaction", b =>
                {
                    b.Navigation("Distributions");
                });

            modelBuilder.Entity("FeeService.Data.Entities.Settlement", b =>
                {
                    b.Navigation("Distributions");
                });
#pragma warning restore 612, 618
        }
    }
}

// <auto-generated />
using System;
using GovernanceService.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace GovernanceService.Migrations
{
    [DbContext(typeof(GovernanceDbContext))]
    partial class GovernanceDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("GovernanceService.Data.Entities.GovernanceRule", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<bool>("AllowDelegation")
                        .HasColumnType("boolean");

                    b.Property<int>("ApplicableType")
                        .HasColumnType("integer");

                    b.Property<decimal>("ApprovalThreshold")
                        .HasColumnType("decimal(5,2)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("CreatedById")
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<TimeSpan>("ExecutionDelay")
                        .HasColumnType("interval");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<decimal>("MinimumQuorum")
                        .HasColumnType("decimal(5,2)");

                    b.Property<decimal?>("MinimumTokensRequired")
                        .HasColumnType("decimal(18,8)");

                    b.Property<decimal?>("ProposalDeposit")
                        .HasColumnType("decimal(18,8)");

                    b.Property<int?>("RequiredSignatures")
                        .HasColumnType("integer");

                    b.Property<bool>("RequiresMultiSig")
                        .HasColumnType("boolean");

                    b.Property<string>("RuleName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("UpdatedById")
                        .HasColumnType("uuid");

                    b.Property<TimeSpan>("VotingPeriod")
                        .HasColumnType("interval");

                    b.HasKey("Id");

                    b.HasIndex("ApplicableType")
                        .IsUnique()
                        .HasDatabaseName("IX_GovernanceRules_ApplicableType_Active_Unique")
                        .HasFilter("\"IsActive\" = true");

                    b.HasIndex("IsActive");

                    b.ToTable("GovernanceRules");
                });

            modelBuilder.Entity("GovernanceService.Data.Entities.Proposal", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<decimal>("ApprovalThreshold")
                        .HasColumnType("decimal(5,2)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("CreatorId")
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(5000)
                        .HasColumnType("character varying(5000)");

                    b.Property<string>("ExecutionParameters")
                        .HasMaxLength(2000)
                        .HasColumnType("character varying(2000)");

                    b.Property<decimal>("QuorumPercentage")
                        .HasColumnType("decimal(5,2)");

                    b.Property<decimal?>("RequestedAmount")
                        .HasColumnType("decimal(18,8)");

                    b.Property<string>("RequestedCurrency")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<int>("Type")
                        .HasColumnType("integer");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("VotingEndTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("VotingStartTime")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("CreatorId");

                    b.HasIndex("Status");

                    b.HasIndex("Type");

                    b.HasIndex("VotingEndTime");

                    b.HasIndex("VotingStartTime");

                    b.ToTable("Proposals");
                });

            modelBuilder.Entity("GovernanceService.Data.Entities.ProposalExecution", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("ErrorMessage")
                        .HasMaxLength(2000)
                        .HasColumnType("character varying(2000)");

                    b.Property<DateTime?>("ExecutedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("ExecutedById")
                        .HasColumnType("uuid");

                    b.Property<decimal?>("ExecutionCost")
                        .HasColumnType("decimal(18,8)");

                    b.Property<string>("ExecutionParameters")
                        .HasMaxLength(2000)
                        .HasColumnType("character varying(2000)");

                    b.Property<string>("ExecutionResult")
                        .HasMaxLength(5000)
                        .HasColumnType("character varying(5000)");

                    b.Property<decimal?>("GasUsed")
                        .HasColumnType("decimal(18,8)");

                    b.Property<int>("MaxRetries")
                        .HasColumnType("integer");

                    b.Property<Guid>("ProposalId")
                        .HasColumnType("uuid");

                    b.Property<int>("RetryCount")
                        .HasColumnType("integer");

                    b.Property<DateTime>("ScheduledAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<string>("TransactionHash")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("ExecutedAt");

                    b.HasIndex("ProposalId");

                    b.HasIndex("Status");

                    b.ToTable("ProposalExecutions");
                });

            modelBuilder.Entity("GovernanceService.Data.Entities.Vote", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CastAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Choice")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("DelegatedBy")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsDelegated")
                        .HasColumnType("boolean");

                    b.Property<Guid>("ProposalId")
                        .HasColumnType("uuid");

                    b.Property<string>("Reason")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<string>("TransactionHash")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("VoterId")
                        .HasColumnType("uuid");

                    b.Property<decimal>("VotingPower")
                        .HasColumnType("decimal(18,8)");

                    b.HasKey("Id");

                    b.HasIndex("CastAt");

                    b.HasIndex("ProposalId");

                    b.HasIndex("VoterId");

                    b.HasIndex("ProposalId", "VoterId")
                        .IsUnique()
                        .HasDatabaseName("IX_Votes_ProposalId_VoterId_Unique");

                    b.ToTable("Votes");
                });

            modelBuilder.Entity("GovernanceService.Data.Entities.VotingDelegation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<bool>("AutoRenew")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("DelegateId")
                        .HasColumnType("uuid");

                    b.Property<string>("DelegationReason")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<Guid>("DelegatorId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("ExpiresAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<decimal?>("MaxDelegationPercentage")
                        .HasColumnType("decimal(5,2)");

                    b.Property<string>("RevocationReason")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<DateTime?>("RevokedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("RevokedById")
                        .HasColumnType("uuid");

                    b.Property<int?>("SpecificType")
                        .HasColumnType("integer");

                    b.Property<string>("TransactionHash")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("DelegateId");

                    b.HasIndex("DelegatorId");

                    b.HasIndex("IsActive");

                    b.HasIndex("DelegatorId", "DelegateId", "SpecificType")
                        .IsUnique()
                        .HasDatabaseName("IX_VotingDelegations_Delegator_Delegate_Type_Unique");

                    b.ToTable("VotingDelegations");
                });

            modelBuilder.Entity("GovernanceService.Data.Entities.ProposalExecution", b =>
                {
                    b.HasOne("GovernanceService.Data.Entities.Proposal", "Proposal")
                        .WithMany("Executions")
                        .HasForeignKey("ProposalId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Proposal");
                });

            modelBuilder.Entity("GovernanceService.Data.Entities.Vote", b =>
                {
                    b.HasOne("GovernanceService.Data.Entities.Proposal", "Proposal")
                        .WithMany("Votes")
                        .HasForeignKey("ProposalId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Proposal");
                });

            modelBuilder.Entity("GovernanceService.Data.Entities.Proposal", b =>
                {
                    b.Navigation("Executions");

                    b.Navigation("Votes");
                });
#pragma warning restore 612, 618
        }
    }
}

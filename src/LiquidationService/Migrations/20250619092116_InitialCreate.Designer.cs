// <auto-generated />
using System;
using LiquidationService.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace LiquidationService.Migrations
{
    [DbContext(typeof(LiquidationDbContext))]
    [Migration("20250619092116_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("LiquidationService.Data.Entities.AssetEligibility", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("AllowedCountries")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<string>("AssetName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("AssetSymbol")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("BlockchainNetwork")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("ComplianceNotes")
                        .HasMaxLength(2000)
                        .HasColumnType("character varying(2000)");

                    b.Property<string>("ContractAddress")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<int?>("CoolingOffPeriodHours")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<decimal?>("DailyLiquidationLimit")
                        .HasColumnType("decimal(18,8)");

                    b.Property<int?>("DecimalPlaces")
                        .HasColumnType("integer");

                    b.Property<int?>("EstimatedProcessingTimeMinutes")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("ExpiresAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<decimal?>("FeePercentage")
                        .HasColumnType("decimal(5,4)");

                    b.Property<DateTime?>("FirstEligibleAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<decimal?>("FixedFee")
                        .HasColumnType("decimal(18,8)");

                    b.Property<bool>("IsEnabled")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsPrivacyCoin")
                        .HasColumnType("boolean");

                    b.Property<bool?>("IsSecurityToken")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsStablecoin")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("LastReviewedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("LastReviewedByUserId")
                        .HasColumnType("uuid");

                    b.Property<int?>("LockupPeriodDays")
                        .HasColumnType("integer");

                    b.Property<int?>("MaxProcessingTimeMinutes")
                        .HasColumnType("integer");

                    b.Property<decimal?>("MaximumLiquidationAmount")
                        .HasColumnType("decimal(18,8)");

                    b.Property<string>("Metadata")
                        .HasColumnType("text");

                    b.Property<int?>("MinimumHoldingPeriodDays")
                        .HasColumnType("integer");

                    b.Property<decimal?>("MinimumLiquidationAmount")
                        .HasColumnType("decimal(18,8)");

                    b.Property<decimal?>("MonthlyLiquidationLimit")
                        .HasColumnType("decimal(18,8)");

                    b.Property<decimal?>("MultiSignatureThreshold")
                        .HasColumnType("decimal(18,8)");

                    b.Property<DateTime?>("NextReviewDue")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Notes")
                        .HasMaxLength(2000)
                        .HasColumnType("character varying(2000)");

                    b.Property<string>("RegulatoryClassification")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<bool>("RequiresEnhancedDueDiligence")
                        .HasColumnType("boolean");

                    b.Property<bool>("RequiresKyc")
                        .HasColumnType("boolean");

                    b.Property<bool>("RequiresMultiSignature")
                        .HasColumnType("boolean");

                    b.Property<bool>("RequiresSpecialHandling")
                        .HasColumnType("boolean");

                    b.Property<string>("RestrictedCountries")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<int>("ReviewFrequencyDays")
                        .HasColumnType("integer");

                    b.Property<int>("RiskLevel")
                        .HasColumnType("integer");

                    b.Property<string>("SpecialHandlingInstructions")
                        .HasMaxLength(2000)
                        .HasColumnType("character varying(2000)");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("StatusChangedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("StatusChangedByUserId")
                        .HasColumnType("uuid");

                    b.Property<string>("StatusReason")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<string>("SupportedOutputCurrencies")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("AssetSymbol")
                        .IsUnique();

                    b.HasIndex("CreatedAt");

                    b.HasIndex("Status");

                    b.ToTable("AssetEligibilities");
                });

            modelBuilder.Entity("LiquidationService.Data.Entities.ComplianceCheck", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("CheckDetails")
                        .HasColumnType("text");

                    b.Property<int>("CheckType")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("CompletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<long?>("DurationMs")
                        .HasColumnType("bigint");

                    b.Property<string>("ErrorMessage")
                        .HasMaxLength(2000)
                        .HasColumnType("character varying(2000)");

                    b.Property<DateTime?>("ExpiresAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("ExternalReferenceId")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("FailureReason")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<bool>("IsOverridden")
                        .HasColumnType("boolean");

                    b.Property<Guid>("LiquidationRequestId")
                        .HasColumnType("uuid");

                    b.Property<int>("MaxRetries")
                        .HasColumnType("integer");

                    b.Property<string>("Metadata")
                        .HasColumnType("text");

                    b.Property<DateTime?>("NextRetryAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("OriginalResult")
                        .HasColumnType("integer");

                    b.Property<string>("OverrideReason")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<string>("Provider")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Recommendations")
                        .HasMaxLength(2000)
                        .HasColumnType("character varying(2000)");

                    b.Property<bool>("RequiresManualReview")
                        .HasColumnType("boolean");

                    b.Property<int>("Result")
                        .HasColumnType("integer");

                    b.Property<int>("RetryAttempts")
                        .HasColumnType("integer");

                    b.Property<string>("ReviewComments")
                        .HasMaxLength(2000)
                        .HasColumnType("character varying(2000)");

                    b.Property<DateTime?>("ReviewedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("ReviewedByUserId")
                        .HasColumnType("uuid");

                    b.Property<int?>("RiskLevel")
                        .HasColumnType("integer");

                    b.Property<int?>("RiskScore")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("StartedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("CheckType");

                    b.HasIndex("CreatedAt");

                    b.HasIndex("LiquidationRequestId");

                    b.HasIndex("Result");

                    b.ToTable("ComplianceChecks");
                });

            modelBuilder.Entity("LiquidationService.Data.Entities.LiquidationRequest", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<decimal?>("ActualOutputAmount")
                        .HasColumnType("decimal(18,8)");

                    b.Property<decimal>("AssetAmount")
                        .HasColumnType("decimal(18,8)");

                    b.Property<bool>("AssetEligibilityVerified")
                        .HasColumnType("boolean");

                    b.Property<string>("AssetSymbol")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<DateTime?>("CompletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("ComplianceApproved")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("DestinationAddress")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<string>("DestinationDetails")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<int>("DestinationType")
                        .HasColumnType("integer");

                    b.Property<decimal?>("EstimatedOutputAmount")
                        .HasColumnType("decimal(18,8)");

                    b.Property<decimal?>("ExchangeRate")
                        .HasColumnType("decimal(18,8)");

                    b.Property<DateTime?>("ExpiresAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<decimal?>("Fees")
                        .HasColumnType("decimal(18,8)");

                    b.Property<bool>("KycVerified")
                        .HasColumnType("boolean");

                    b.Property<Guid?>("LiquidityProviderId")
                        .HasColumnType("uuid");

                    b.Property<decimal?>("MarketPriceAtRequest")
                        .HasColumnType("decimal(18,8)");

                    b.Property<bool>("MultiSignatureApproved")
                        .HasColumnType("boolean");

                    b.Property<string>("Notes")
                        .HasMaxLength(2000)
                        .HasColumnType("character varying(2000)");

                    b.Property<string>("OutputSymbol")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<int>("OutputType")
                        .HasColumnType("integer");

                    b.Property<string>("PaymentTransactionId")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("RejectionReason")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<bool>("RequiresMultiSignature")
                        .HasColumnType("boolean");

                    b.Property<int>("RiskLevel")
                        .HasColumnType("integer");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<string>("TransactionHash")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("AssetSymbol");

                    b.HasIndex("CreatedAt");

                    b.HasIndex("LiquidityProviderId");

                    b.HasIndex("Status");

                    b.HasIndex("UserId");

                    b.ToTable("LiquidationRequests");
                });

            modelBuilder.Entity("LiquidationService.Data.Entities.LiquidationTransaction", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int?>("ActualExecutionTimeMinutes")
                        .HasColumnType("integer");

                    b.Property<decimal>("AssetAmount")
                        .HasColumnType("decimal(18,8)");

                    b.Property<string>("AssetSymbol")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<long?>("BlockNumber")
                        .HasColumnType("bigint");

                    b.Property<int?>("Confirmations")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("ConfirmedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("DestinationAddress")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("ErrorMessage")
                        .HasMaxLength(2000)
                        .HasColumnType("character varying(2000)");

                    b.Property<int?>("EstimatedExecutionTimeMinutes")
                        .HasColumnType("integer");

                    b.Property<decimal>("ExchangeRate")
                        .HasColumnType("decimal(18,8)");

                    b.Property<DateTime?>("ExecutionCompletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("ExecutionStartedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("FailureReason")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<bool>("IsReversed")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsReversible")
                        .HasColumnType("boolean");

                    b.Property<Guid>("LiquidationRequestId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("LiquidityProviderId")
                        .HasColumnType("uuid");

                    b.Property<decimal?>("MarketPriceAtExecution")
                        .HasColumnType("decimal(18,8)");

                    b.Property<int>("MaxRetries")
                        .HasColumnType("integer");

                    b.Property<string>("Metadata")
                        .HasColumnType("text");

                    b.Property<decimal?>("NetAmount")
                        .HasColumnType("decimal(18,8)");

                    b.Property<decimal?>("NetworkFee")
                        .HasColumnType("decimal(18,8)");

                    b.Property<DateTime?>("NextRetryAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Notes")
                        .HasMaxLength(2000)
                        .HasColumnType("character varying(2000)");

                    b.Property<decimal?>("OutputAmount")
                        .HasColumnType("decimal(18,8)");

                    b.Property<string>("OutputSymbol")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("PaymentGateway")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("PaymentTransactionId")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<decimal?>("PlatformFee")
                        .HasColumnType("decimal(18,8)");

                    b.Property<decimal?>("ProviderFee")
                        .HasColumnType("decimal(18,8)");

                    b.Property<int>("RetryAttempts")
                        .HasColumnType("integer");

                    b.Property<string>("ReversalReason")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<string>("ReversalTransactionHash")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<DateTime?>("ReversedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("ReversibleUntil")
                        .HasColumnType("timestamp with time zone");

                    b.Property<decimal?>("SlippagePercentage")
                        .HasColumnType("decimal(5,4)");

                    b.Property<string>("SmartContractAddress")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("SourceAddress")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<decimal?>("TotalFees")
                        .HasColumnType("decimal(18,8)");

                    b.Property<string>("TransactionHash")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("CreatedAt");

                    b.HasIndex("LiquidationRequestId");

                    b.HasIndex("LiquidityProviderId");

                    b.HasIndex("Status");

                    b.HasIndex("TransactionHash");

                    b.ToTable("LiquidationTransactions");
                });

            modelBuilder.Entity("LiquidationService.Data.Entities.LiquidityProvider", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Address")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<DateTime?>("ApprovedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<decimal?>("AvailableLiquidity")
                        .HasColumnType("decimal(18,8)");

                    b.Property<double?>("AverageResponseTimeMinutes")
                        .HasColumnType("double precision");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<int>("FailedLiquidations")
                        .HasColumnType("integer");

                    b.Property<decimal?>("FeePercentage")
                        .HasColumnType("decimal(5,4)");

                    b.Property<bool>("IsAvailable")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("KycCompletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("KycVerified")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("LastActiveAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("LiquidityPoolAddress")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<decimal?>("MaximumTransactionAmount")
                        .HasColumnType("decimal(18,8)");

                    b.Property<decimal?>("MinimumTransactionAmount")
                        .HasColumnType("decimal(18,8)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("Notes")
                        .HasMaxLength(2000)
                        .HasColumnType("character varying(2000)");

                    b.Property<string>("OperatingHours")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<decimal?>("Rating")
                        .HasColumnType("numeric");

                    b.Property<bool>("ReserveVerified")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("ReserveVerifiedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<int>("SuccessfulLiquidations")
                        .HasColumnType("integer");

                    b.Property<string>("SupportedAssets")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<string>("SupportedOutputCurrencies")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<DateTime?>("SuspendedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("SuspensionReason")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<string>("TimeZone")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<decimal>("TotalFeesEarned")
                        .HasColumnType("decimal(18,8)");

                    b.Property<decimal>("TotalLiquidityProvided")
                        .HasColumnType("decimal(18,8)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("CreatedAt");

                    b.HasIndex("Status");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("LiquidityProviders");
                });

            modelBuilder.Entity("LiquidationService.Data.Entities.MarketPriceSnapshot", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<decimal?>("AskPrice")
                        .HasColumnType("decimal(18,8)");

                    b.Property<string>("AssetSymbol")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<decimal?>("AvailableLiquidity")
                        .HasColumnType("decimal(18,8)");

                    b.Property<decimal?>("BidPrice")
                        .HasColumnType("decimal(18,8)");

                    b.Property<decimal?>("Change24hPercent")
                        .HasColumnType("decimal(5,4)");

                    b.Property<int?>("ConfidenceLevel")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("DelaySeconds")
                        .HasColumnType("integer");

                    b.Property<string>("ErrorMessage")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<decimal?>("EstimatedSlippage")
                        .HasColumnType("decimal(5,4)");

                    b.Property<string>("Exchange")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<DateTime>("ExpiresAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<decimal?>("High24h")
                        .HasColumnType("decimal(18,8)");

                    b.Property<bool>("IsRealTime")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsSuitableForLiquidation")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsUsedForLiquidation")
                        .HasColumnType("boolean");

                    b.Property<int?>("LatencyMs")
                        .HasColumnType("integer");

                    b.Property<Guid?>("LiquidationRequestId")
                        .HasColumnType("uuid");

                    b.Property<decimal?>("Low24h")
                        .HasColumnType("decimal(18,8)");

                    b.Property<decimal?>("MarketCap")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("MaxTransactionSize")
                        .HasColumnType("decimal(18,8)");

                    b.Property<string>("Metadata")
                        .HasColumnType("text");

                    b.Property<decimal?>("MinTransactionSize")
                        .HasColumnType("decimal(18,8)");

                    b.Property<string>("OutputSymbol")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,8)");

                    b.Property<string>("PriceSource")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("RawResponse")
                        .HasColumnType("text");

                    b.Property<int>("RetryAttempts")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("SourceTimestamp")
                        .HasColumnType("timestamp with time zone");

                    b.Property<decimal?>("Spread")
                        .HasColumnType("decimal(18,8)");

                    b.Property<string>("TradingPair")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("UnsuitabilityReason")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("UsedForLiquidationAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("ValidityMinutes")
                        .HasColumnType("integer");

                    b.Property<decimal?>("Volume24h")
                        .HasColumnType("decimal(18,8)");

                    b.HasKey("Id");

                    b.HasIndex("AssetSymbol");

                    b.HasIndex("CreatedAt");

                    b.HasIndex("LiquidationRequestId");

                    b.HasIndex("OutputSymbol");

                    b.HasIndex("PriceSource");

                    b.ToTable("MarketPriceSnapshots");
                });

            modelBuilder.Entity("LiquidationService.Data.Entities.ComplianceCheck", b =>
                {
                    b.HasOne("LiquidationService.Data.Entities.LiquidationRequest", "LiquidationRequest")
                        .WithMany("ComplianceChecks")
                        .HasForeignKey("LiquidationRequestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("LiquidationRequest");
                });

            modelBuilder.Entity("LiquidationService.Data.Entities.LiquidationRequest", b =>
                {
                    b.HasOne("LiquidationService.Data.Entities.LiquidityProvider", "LiquidityProvider")
                        .WithMany()
                        .HasForeignKey("LiquidityProviderId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("LiquidityProvider");
                });

            modelBuilder.Entity("LiquidationService.Data.Entities.LiquidationTransaction", b =>
                {
                    b.HasOne("LiquidationService.Data.Entities.LiquidationRequest", "LiquidationRequest")
                        .WithMany("LiquidationTransactions")
                        .HasForeignKey("LiquidationRequestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LiquidationService.Data.Entities.LiquidityProvider", "LiquidityProvider")
                        .WithMany()
                        .HasForeignKey("LiquidityProviderId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("LiquidationRequest");

                    b.Navigation("LiquidityProvider");
                });

            modelBuilder.Entity("LiquidationService.Data.Entities.MarketPriceSnapshot", b =>
                {
                    b.HasOne("LiquidationService.Data.Entities.LiquidationRequest", "LiquidationRequest")
                        .WithMany("MarketPriceSnapshots")
                        .HasForeignKey("LiquidationRequestId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("LiquidationRequest");
                });

            modelBuilder.Entity("LiquidationService.Data.Entities.LiquidationRequest", b =>
                {
                    b.Navigation("ComplianceChecks");

                    b.Navigation("LiquidationTransactions");

                    b.Navigation("MarketPriceSnapshots");
                });
#pragma warning restore 612, 618
        }
    }
}

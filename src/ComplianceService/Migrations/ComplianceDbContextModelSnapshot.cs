// <auto-generated />
using System;
using ComplianceService.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace ComplianceService.Migrations
{
    [DbContext(typeof(ComplianceDbContext))]
    partial class ComplianceDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.HasSequence<int>("case_number_seq");

            modelBuilder.Entity("ComplianceService.Data.Entities.CaseDocument", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("CaseId")
                        .HasColumnType("uuid");

                    b.Property<string>("Comments")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<string>("ContentType")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("CorrelationId")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("DocumentType")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<byte[]>("FileData")
                        .HasColumnType("bytea");

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<long>("FileSize")
                        .HasColumnType("bigint");

                    b.Property<string>("FileUrl")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsProcessed")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("ProcessedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("ProcessedBy")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("ProcessingResult")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<DateTime>("UploadedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UploadedBy")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("Id");

                    b.HasIndex("UploadedAt");

                    b.HasIndex("CaseId", "DocumentType");

                    b.ToTable("CaseDocuments");
                });

            modelBuilder.Entity("ComplianceService.Data.Entities.CaseReview", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("AIAnalysisData")
                        .HasColumnType("text");

                    b.Property<Guid>("CaseId")
                        .HasColumnType("uuid");

                    b.Property<decimal?>("ConfidenceScore")
                        .HasPrecision(5, 2)
                        .HasColumnType("decimal(3,2)");

                    b.Property<string>("CorrelationId")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("DetailedAnalysis")
                        .HasColumnType("text");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("NextReviewBy")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<DateTime?>("NextReviewDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("RecommendedAction")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("ReviewNotes")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<string>("ReviewResult")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("ReviewType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<DateTime>("ReviewedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("ReviewedBy")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("Id");

                    b.HasIndex("ReviewedAt");

                    b.HasIndex("ReviewedBy");

                    b.HasIndex("CaseId", "ReviewType");

                    b.ToTable("CaseReviews");
                });

            modelBuilder.Entity("ComplianceService.Data.Entities.ComplianceCase", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("AssignedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("AssignedTo")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("CaseNumber")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasDefaultValueSql("'CASE-' || EXTRACT(YEAR FROM NOW()) || '-' || LPAD(NEXTVAL('case_number_seq')::TEXT, 6, '0')");

                    b.Property<string>("CaseType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<DateTime?>("ClosedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CorrelationId")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<Guid?>("KycVerificationId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("LastActivityAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Priority")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<bool>("RequiresAIReview")
                        .HasColumnType("boolean");

                    b.Property<bool>("RequiresComplianceOfficerReview")
                        .HasColumnType("boolean");

                    b.Property<string>("Resolution")
                        .HasColumnType("text");

                    b.Property<DateTime?>("ResolvedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("CaseNumber")
                        .IsUnique();

                    b.HasIndex("KycVerificationId");

                    b.HasIndex("Priority", "Status")
                        .HasDatabaseName("IX_ComplianceCases_Priority_Status");

                    b.HasIndex("UserId", "Status")
                        .HasDatabaseName("IX_ComplianceCases_UserId_Status");

                    b.ToTable("ComplianceCases");
                });

            modelBuilder.Entity("ComplianceService.Data.Entities.ComplianceEvent", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Action")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<Guid?>("CaseId")
                        .HasColumnType("uuid");

                    b.Property<string>("CorrelationId")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<string>("EventData")
                        .HasColumnType("text");

                    b.Property<string>("EventType")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("IpAddress")
                        .HasMaxLength(45)
                        .HasColumnType("character varying(45)");

                    b.Property<bool>("IsResolved")
                        .HasColumnType("boolean");

                    b.Property<Guid?>("KycVerificationId")
                        .HasColumnType("uuid");

                    b.Property<bool>("RequiresInvestigation")
                        .HasColumnType("boolean");

                    b.Property<string>("ResolutionNotes")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<DateTime?>("ResolvedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("ResolvedBy")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Result")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("Severity")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("Source")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UserAgent")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("CaseId");

                    b.HasIndex("CorrelationId");

                    b.HasIndex("KycVerificationId");

                    b.HasIndex("Severity");

                    b.HasIndex("Timestamp")
                        .HasDatabaseName("IX_ComplianceEvents_Timestamp");

                    b.HasIndex("UserId", "EventType")
                        .HasDatabaseName("IX_ComplianceEvents_UserId_EventType");

                    b.ToTable("ComplianceEvents");
                });

            modelBuilder.Entity("ComplianceService.Data.Entities.KycVerification", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Comments")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<DateTime?>("CompletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("ComplyCubeCheckId")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("ComplyCubeClientId")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("ComplyCubeResult")
                        .HasColumnType("text");

                    b.Property<string>("CorrelationId")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<DateTime?>("ExpiresAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("FailureReason")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("KycLevel")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<decimal?>("RiskScore")
                        .HasPrecision(5, 2)
                        .HasColumnType("decimal(3,2)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("TriggerReason")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("ComplyCubeClientId")
                        .IsUnique();

                    b.HasIndex("CorrelationId");

                    b.HasIndex("UserId", "Status")
                        .HasDatabaseName("IX_KycVerifications_UserId_Status");

                    b.ToTable("KycVerifications");
                });

            modelBuilder.Entity("ComplianceService.Data.Entities.CaseDocument", b =>
                {
                    b.HasOne("ComplianceService.Data.Entities.ComplianceCase", "ComplianceCase")
                        .WithMany("CaseDocuments")
                        .HasForeignKey("CaseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ComplianceCase");
                });

            modelBuilder.Entity("ComplianceService.Data.Entities.CaseReview", b =>
                {
                    b.HasOne("ComplianceService.Data.Entities.ComplianceCase", "ComplianceCase")
                        .WithMany("CaseReviews")
                        .HasForeignKey("CaseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ComplianceCase");
                });

            modelBuilder.Entity("ComplianceService.Data.Entities.ComplianceCase", b =>
                {
                    b.HasOne("ComplianceService.Data.Entities.KycVerification", "KycVerification")
                        .WithMany("ComplianceCases")
                        .HasForeignKey("KycVerificationId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("KycVerification");
                });

            modelBuilder.Entity("ComplianceService.Data.Entities.ComplianceEvent", b =>
                {
                    b.HasOne("ComplianceService.Data.Entities.ComplianceCase", "ComplianceCase")
                        .WithMany("ComplianceEvents")
                        .HasForeignKey("CaseId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("ComplianceService.Data.Entities.KycVerification", "KycVerification")
                        .WithMany("ComplianceEvents")
                        .HasForeignKey("KycVerificationId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("ComplianceCase");

                    b.Navigation("KycVerification");
                });

            modelBuilder.Entity("ComplianceService.Data.Entities.ComplianceCase", b =>
                {
                    b.Navigation("CaseDocuments");

                    b.Navigation("CaseReviews");

                    b.Navigation("ComplianceEvents");
                });

            modelBuilder.Entity("ComplianceService.Data.Entities.KycVerification", b =>
                {
                    b.Navigation("ComplianceCases");

                    b.Navigation("ComplianceEvents");
                });
#pragma warning restore 612, 618
        }
    }
}

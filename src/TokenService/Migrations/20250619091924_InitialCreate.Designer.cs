// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using TokenService.Data;

#nullable disable

namespace TokenService.Migrations
{
    [DbContext(typeof(TokenDbContext))]
    [Migration("20250619091924_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("TokenService.Data.Entities.Token", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("ApprovalStatus")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<DateTime?>("ApprovedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("ApprovedBy")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("AssetMetadata")
                        .HasColumnType("jsonb");

                    b.Property<string>("AssetType")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("CreatorId")
                        .HasColumnType("uuid");

                    b.Property<bool>("CrossChainEnabled")
                        .HasColumnType("boolean");

                    b.Property<int>("Decimals")
                        .HasColumnType("integer");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<DateTime?>("LastUpdated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("MultiChainAssetName")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Network")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<Guid>("QuantumLedgerAccountId")
                        .HasColumnType("uuid");

                    b.Property<string>("QuantumLedgerExternalOwnerId")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("QuantumLedgerSubstitutionKeyId")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("Symbol")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("TokenType")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<decimal>("TotalSupply")
                        .HasColumnType("decimal(36,0)");

                    b.HasKey("Id");

                    b.HasIndex("ApprovalStatus");

                    b.HasIndex("QuantumLedgerAccountId")
                        .IsUnique();

                    b.HasIndex("CreatorId", "Status");

                    b.HasIndex("Symbol", "Network")
                        .IsUnique();

                    b.ToTable("Tokens");
                });

            modelBuilder.Entity("TokenService.Data.Entities.TokenBalance", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("AccountId")
                        .HasColumnType("uuid");

                    b.Property<decimal>("Balance")
                        .HasColumnType("decimal(36,18)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("LastQuantumLedgerTransactionId")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<DateTime?>("LastSyncedWithQuantumLedger")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("LastUpdated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<decimal>("LockedBalance")
                        .HasColumnType("decimal(36,18)");

                    b.Property<Guid>("TokenId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.HasIndex("TokenId");

                    b.HasIndex("TokenId", "AccountId")
                        .IsUnique();

                    b.ToTable("TokenBalances");
                });

            modelBuilder.Entity("TokenService.Data.Entities.TokenSubmission", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<decimal>("AiComplianceScore")
                        .HasColumnType("numeric");

                    b.Property<string>("AiRecommendations")
                        .HasColumnType("jsonb");

                    b.Property<string>("AiRedFlags")
                        .HasColumnType("jsonb");

                    b.Property<string>("ApprovalStatus")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("AssetType")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<DateTime?>("AssetVerificationDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("AssetVerificationId")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("AssetVerificationStatus")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("ConfigurationJson")
                        .IsRequired()
                        .HasColumnType("jsonb");

                    b.Property<Guid>("CreatorId")
                        .HasColumnType("uuid");

                    b.Property<string>("ReviewComments")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<DateTime?>("ReviewedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("ReviewedBy")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<DateTime>("SubmissionDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("TokenId")
                        .HasColumnType("uuid");

                    b.Property<string>("TokenPurpose")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<string>("UseCase")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.HasKey("Id");

                    b.HasIndex("AiComplianceScore");

                    b.HasIndex("ApprovalStatus");

                    b.HasIndex("TokenId");

                    b.HasIndex("CreatorId", "SubmissionDate");

                    b.ToTable("TokenSubmissions");
                });

            modelBuilder.Entity("TokenService.Data.Entities.TokenTransfer", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(36,18)");

                    b.Property<DateTime?>("CompletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<string>("ExternalTransactionHash")
                        .HasMaxLength(66)
                        .HasColumnType("character varying(66)");

                    b.Property<string>("FailureReason")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<string>("FeeCurrency")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.Property<Guid>("FromAccountId")
                        .HasColumnType("uuid");

                    b.Property<decimal?>("GasPrice")
                        .HasColumnType("decimal(18,8)");

                    b.Property<decimal?>("GasUsed")
                        .HasColumnType("decimal(18,0)");

                    b.Property<string>("Metadata")
                        .HasColumnType("jsonb");

                    b.Property<string>("MultiChainTransactionId")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<Guid>("QuantumLedgerTransactionId")
                        .HasColumnType("uuid");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<Guid>("ToAccountId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("TokenId")
                        .HasColumnType("uuid");

                    b.Property<decimal>("TransactionFee")
                        .HasColumnType("decimal(18,8)");

                    b.HasKey("Id");

                    b.HasIndex("QuantumLedgerTransactionId")
                        .IsUnique();

                    b.HasIndex("FromAccountId", "Status");

                    b.HasIndex("ToAccountId", "Status");

                    b.HasIndex("TokenId", "CreatedAt");

                    b.ToTable("TokenTransfers");
                });

            modelBuilder.Entity("TokenService.Data.Entities.TokenBalance", b =>
                {
                    b.HasOne("TokenService.Data.Entities.Token", "Token")
                        .WithMany("Balances")
                        .HasForeignKey("TokenId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Token");
                });

            modelBuilder.Entity("TokenService.Data.Entities.TokenSubmission", b =>
                {
                    b.HasOne("TokenService.Data.Entities.Token", "Token")
                        .WithMany("Submissions")
                        .HasForeignKey("TokenId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Token");
                });

            modelBuilder.Entity("TokenService.Data.Entities.TokenTransfer", b =>
                {
                    b.HasOne("TokenService.Data.Entities.Token", "Token")
                        .WithMany("Transfers")
                        .HasForeignKey("TokenId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Token");
                });

            modelBuilder.Entity("TokenService.Data.Entities.Token", b =>
                {
                    b.Navigation("Balances");

                    b.Navigation("Submissions");

                    b.Navigation("Transfers");
                });
#pragma warning restore 612, 618
        }
    }
}

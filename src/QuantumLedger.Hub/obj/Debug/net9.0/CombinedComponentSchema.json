{
  "properties": {
    "AWS": {
      "description": "Settings for configuring the AWS SDK for .NET",
      "type": "object",
      "properties": {
        "AllowAutoRedirect": {
          "type": "boolean",
          "description": "This flag controls if .NET HTTP infrastructure should follow redirection responses (e.g. HTTP 307 - temporary redirect)."
        },
        "AuthenticationRegion": {
          "type": "string",
          "description": "Overrides the region used when computing AWS signature."
        },
        "BufferSize": {
          "type": "integer",
          "description": "The BufferSize controls the buffer used to read in from input streams and write out to the request."
        },
        "ClientAppId": {
          "type": "string",
          "description": "ClientAppId is an optional application specific identifier that can be set. When set it will be appended to the User-Agent header of every request in the form of app/{ClientAppId}."
        },
        "DefaultsMode": {
          "enum": [
            "Standard",
            "InRegion",
            "CrossRegion",
            "Mobile",
            "Auto"
          ],
          "description": "Sets the mode that SDK should use when setting default values for settings."
        },
        "DisableHostPrefixInjection": {
          "type": "boolean",
          "description": "Host prefix injection prefixes the service endpoint with request members from APIs which use this feature."
        },
        "DisableLogging": {
          "type": "boolean",
          "description": "If true logging for this client will be disabled."
        },
        "DisableRequestCompression": {
          "type": "boolean",
          "description": "Controls whether request payloads are automatically compressed for supported operations."
        },
        "EndpointDiscoveryCacheLimit": {
          "type": "integer",
          "description": "The maximum number of discovered endpoints that can be stored within the cache for the client."
        },
        "EndpointDiscoveryEnabled": {
          "type": "boolean",
          "description": "The flag indicating if endpoint discovery should be enabled or disabled for operations that are not required to use endpoint discovery."
        },
        "FastFailRequests": {
          "type": "boolean",
          "description": "Under Adaptive retry mode the SDK will use fail fast logic."
        },
        "HttpClientCacheSize": {
          "type": "integer",
          "description": "Controls the number of HttpClients cached for service clients."
        },
        "IgnoreConfiguredEndpointUrls": {
          "type": "boolean",
          "description": "If set to true the SDK will ignore the configured endpointUrls in the config file or in the environment variables."
        },
        "LogMetrics": {
          "type": "boolean",
          "description": "Flag on whether to log metrics for service calls."
        },
        "LogResponse": {
          "type": "boolean",
          "description": "If this property is set to true, the service response is logged."
        },
        "MaxErrorRetry": {
          "type": "integer",
          "description": "How many retry HTTP requests an SDK should make for a single SDK operation invocation before giving up."
        },
        "Profile": {
          "type": "string",
          "description": "The AWS credential profiles the service client should be configured for."
        },
        "ProfilesLocation": {
          "type": "string",
          "description": "The path to where the AWS credential profile is configured. By default this is configured at ~/.aws/credentials."
        },
        "ProgressUpdateInterval": {
          "type": "number",
          "description": "The interval at which progress update events are raised for upload operations."
        },
        "Region": {
          "type": "string",
          "description": "The AWS region the service client should be configured for."
        },
        "RequestMinCompressionSizeBytes": {
          "type": "number",
          "description": "Minimum size in bytes that a request body should be to trigger compression."
        },
        "ResignRetries": {
          "type": "boolean",
          "description": "Flag on whether to resign requests on retry or not."
        },
        "RetryMode": {
          "enum": [
            "Standard",
            "Adaptive"
          ],
          "description": "The current mode in use for request retries and influences the value returned from MaxErrorRetry."
        },
        "ServiceURL": {
          "type": "string",
          "description": "Overrides the region for the service clients and sends requests to the indicated url."
        },
        "SessionName": {
          "type": "string",
          "description": "The session name for the assumed session using the SessionRoleArn."
        },
        "SessionRoleArn": {
          "type": "string",
          "description": "If set this role will be assumed using the resolved AWS credentials."
        },
        "ThrottleRetries": {
          "type": "bool",
          "description": "Enables the SDK to use intelligent throttle retry logic."
        },
        "Timeout": {
          "type": "integer",
          "description": "The timeout that is set on the HttpClient Timeout for configuring the wait time for requests time out."
        },
        "UseAlternateUserAgentHeader": {
          "type": "boolean",
          "description": "If true the service client will use the x-amz-user-agent header instead of the User-Agent header to report version and environment information to the AWS service. This is commonly used in Blazor WebAssembly applications."
        },
        "UseDualstackEndpoint": {
          "type": "boolean",
          "description": "Configures the endpoint calculation for a service to go to a dual stack (ipv6 enabled) endpoint for the configured region."
        },
        "UseFIPSEndpoint": {
          "type": "boolean",
          "description": "Configures the endpoint calculation to go to a FIPS endpoint for the configured region."
        },
        "UseHttp": {
          "type": "boolean",
          "description": "If true clients will attempt to use HTTP protocol if the target endpoint supports it."
        }
      }
    },
    "Aspire": {
      "type": "object",
      "properties": {
        "StackExchange": {
          "type": "object",
          "properties": {
            "Redis": {
              "type": "object",
              "properties": {
                "ConfigurationOptions": {
                  "type": "object",
                  "properties": {
                    "AbortOnConnectFail": {
                      "type": "boolean",
                      "description": "Gets or sets whether connect/configuration timeouts should be explicitly notified via a TimeoutException."
                    },
                    "AllowAdmin": {
                      "type": "boolean",
                      "description": "Indicates whether admin operations should be allowed."
                    },
                    "AsyncTimeout": {
                      "type": "integer",
                      "description": "Specifies the time in milliseconds that the system should allow for asynchronous operations (defaults to SyncTimeout)."
                    },
                    "ChannelPrefix": {
                      "type": "object",
                      "properties": {
                        "UseImplicitAutoPattern": {
                          "type": "boolean",
                          "description": "Indicates whether channels should use \u0027StackExchange.Redis.RedisChannel.PatternMode.Auto\u0027 when no \u0027StackExchange.Redis.RedisChannel.PatternMode\u0027 is specified; this is enabled by default, but can be disabled to avoid unexpected wildcard scenarios."
                        }
                      },
                      "description": "Automatically encodes and decodes channels."
                    },
                    "CheckCertificateRevocation": {
                      "type": "boolean",
                      "description": "A Boolean value that specifies whether the certificate revocation list is checked during authentication."
                    },
                    "ClientName": {
                      "type": "string",
                      "description": "The client name to use for all connections."
                    },
                    "ConfigCheckSeconds": {
                      "type": "integer",
                      "description": "Check configuration every n seconds (every minute by default)."
                    },
                    "ConfigurationChannel": {
                      "type": "string",
                      "description": "Channel to use for broadcasting and listening for configuration change notification."
                    },
                    "ConnectRetry": {
                      "type": "integer",
                      "description": "The number of times to repeat the initial connect cycle if no servers respond promptly."
                    },
                    "ConnectTimeout": {
                      "type": "integer",
                      "description": "Specifies the time in milliseconds that should be allowed for connection (defaults to 5 seconds unless SyncTimeout is higher)."
                    },
                    "DefaultDatabase": {
                      "type": "integer",
                      "description": "Specifies the default database to be used when calling \u0027StackExchange.Redis.ConnectionMultiplexer.GetDatabase(System.Int32,System.Object)\u0027 without any parameters."
                    },
                    "DefaultVersion": {
                      "type": "string",
                      "description": "The server version to assume."
                    },
                    "HeartbeatConsistencyChecks": {
                      "type": "boolean",
                      "description": "Whether to enable ECHO checks on every heartbeat to ensure network stream consistency. This is a rare measure to react to any potential network traffic drops ASAP, terminating the connection."
                    },
                    "HeartbeatInterval": {
                      "type": "string",
                      "pattern": "^-?(\\d{1,7}|((\\d{1,7}[\\.:])?(([01]?\\d|2[0-3]):[0-5]?\\d|([01]?\\d|2[0-3]):[0-5]?\\d:[0-5]?\\d)(\\.\\d{1,7})?))$",
                      "description": "Controls how often the connection heartbeats. A heartbeat includes: - Evaluating if any messages have timed out. - Evaluating connection status (checking for failures). - Sending a server message to keep the connection alive if needed."
                    },
                    "HighIntegrity": {
                      "type": "boolean",
                      "description": "A Boolean value that specifies whether to use per-command validation of strict protocol validity. This sends an additional command after EVERY command which incurs measurable overhead."
                    },
                    "IncludeDetailInExceptions": {
                      "type": "boolean",
                      "description": "Whether exceptions include identifiable details (key names, additional .Data annotations)."
                    },
                    "IncludePerformanceCountersInExceptions": {
                      "type": "boolean",
                      "description": "Whether exceptions include performance counter details."
                    },
                    "KeepAlive": {
                      "type": "integer",
                      "description": "Specifies the time in seconds at which connections should be pinged to ensure validity. -1 Defaults to 60 Seconds."
                    },
                    "LibraryName": {
                      "type": "string",
                      "description": "Gets or sets the library name to use for CLIENT SETINFO lib-name calls to Redis during handshake. Defaults to \u0022SE.Redis\u0022."
                    },
                    "Password": {
                      "type": "string",
                      "description": "The password to use to authenticate with the server."
                    },
                    "Protocol": {
                      "enum": [
                        "Resp2",
                        "Resp3"
                      ],
                      "description": "Specify the redis protocol type."
                    },
                    "Proxy": {
                      "enum": [
                        "None",
                        "Twemproxy",
                        "Envoyproxy"
                      ],
                      "description": "Type of proxy to use (if any); for example \u0027StackExchange.Redis.Proxy.Twemproxy\u0027."
                    },
                    "ResolveDns": {
                      "type": "boolean",
                      "description": "Indicates whether endpoints should be resolved via DNS before connecting. If enabled the ConnectionMultiplexer will not re-resolve DNS when attempting to re-connect after a connection failure."
                    },
                    "ServiceName": {
                      "type": "string",
                      "description": "The service name used to resolve a service via sentinel."
                    },
                    "SetClientLibrary": {
                      "type": "boolean",
                      "description": "Gets or sets whether the library should identify itself by library-name/version when possible."
                    },
                    "Ssl": {
                      "type": "boolean",
                      "description": "Indicates whether the connection should be encrypted."
                    },
                    "SslHost": {
                      "type": "string",
                      "description": "The target-host to use when validating SSL certificate; setting a value here enables SSL mode."
                    },
                    "SslProtocols": {
                      "enum": [
                        "None",
                        "Ssl2",
                        "Ssl3",
                        "Tls",
                        "Default",
                        "Tls11",
                        "Tls12",
                        "Tls13"
                      ],
                      "description": "Configures which SSL/TLS protocols should be allowed.  If not set, defaults are chosen by the .NET framework."
                    },
                    "SyncTimeout": {
                      "type": "integer",
                      "description": "Specifies the time in milliseconds that the system should allow for synchronous operations (defaults to 5 seconds)."
                    },
                    "TieBreaker": {
                      "type": "string",
                      "description": "Tie-breaker used to choose between primaries (must match the endpoint exactly)."
                    },
                    "User": {
                      "type": "string",
                      "description": "The username to use to authenticate with the server."
                    }
                  },
                  "description": "The options relevant to a set of redis connections."
                },
                "ConnectionString": {
                  "type": "string",
                  "description": "Gets or sets the comma-delimited configuration string used to connect to the Redis server."
                },
                "DisableHealthChecks": {
                  "type": "boolean",
                  "description": "Gets or sets a boolean value that indicates whether the Redis health check is disabled or not.",
                  "default": false
                },
                "DisableTracing": {
                  "type": "boolean",
                  "description": "Gets or sets a boolean value that indicates whether the OpenTelemetry tracing is disabled or not.",
                  "default": false
                }
              },
              "description": "Provides the client configuration settings for connecting to a Redis server."
            }
          }
        },
        "Npgsql": {
          "type": "object",
          "properties": {
            "EntityFrameworkCore": {
              "type": "object",
              "properties": {
                "PostgreSQL": {
                  "type": "object",
                  "properties": {
                    "CommandTimeout": {
                      "type": "integer",
                      "description": "Gets or sets the time in seconds to wait for the command to execute."
                    },
                    "ConnectionString": {
                      "type": "string",
                      "description": "Gets or sets the connection string of the PostgreSQL database to connect to."
                    },
                    "DisableHealthChecks": {
                      "type": "boolean",
                      "description": "Gets or sets a boolean value that indicates whether the database health check is disabled or not.",
                      "default": false
                    },
                    "DisableMetrics": {
                      "type": "boolean",
                      "description": "Gets or sets a boolean value that indicates whether the OpenTelemetry metrics are disabled or not.",
                      "default": false
                    },
                    "DisableRetry": {
                      "type": "boolean",
                      "description": "Gets or sets whether retries should be disabled.",
                      "default": false
                    },
                    "DisableTracing": {
                      "type": "boolean",
                      "description": "Gets or sets a boolean value that indicates whether the OpenTelemetry tracing is disabled or not.",
                      "default": false
                    }
                  },
                  "description": "Provides the client configuration settings for connecting to a PostgreSQL database using EntityFrameworkCore."
                }
              }
            }
          }
        }
      }
    },
    "Parameters": {
      "description": ".NET Aspire parameter configuration. A parameter\u0027s value will be retrieved from the property with the same name.",
      "type": "object"
    }
  },
  "definitions": {
    "logLevel": {
      "properties": {
        "StackExchange.Redis": {
          "$ref": "#/definitions/logLevelThreshold"
        },
        "Microsoft.EntityFrameworkCore": {
          "$ref": "#/definitions/logLevelThreshold"
        },
        "Microsoft.EntityFrameworkCore.ChangeTracking": {
          "$ref": "#/definitions/logLevelThreshold"
        },
        "Microsoft.EntityFrameworkCore.Database": {
          "$ref": "#/definitions/logLevelThreshold"
        },
        "Microsoft.EntityFrameworkCore.Database.Command": {
          "$ref": "#/definitions/logLevelThreshold"
        },
        "Microsoft.EntityFrameworkCore.Database.Connection": {
          "$ref": "#/definitions/logLevelThreshold"
        },
        "Microsoft.EntityFrameworkCore.Database.Transaction": {
          "$ref": "#/definitions/logLevelThreshold"
        },
        "Microsoft.EntityFrameworkCore.Infrastructure": {
          "$ref": "#/definitions/logLevelThreshold"
        },
        "Microsoft.EntityFrameworkCore.Migrations": {
          "$ref": "#/definitions/logLevelThreshold"
        },
        "Microsoft.EntityFrameworkCore.Model": {
          "$ref": "#/definitions/logLevelThreshold"
        },
        "Microsoft.EntityFrameworkCore.Model.Validation": {
          "$ref": "#/definitions/logLevelThreshold"
        },
        "Microsoft.EntityFrameworkCore.Query": {
          "$ref": "#/definitions/logLevelThreshold"
        },
        "Microsoft.EntityFrameworkCore.Update": {
          "$ref": "#/definitions/logLevelThreshold"
        }
      }
    }
  },
  "type": "object",
  "SourceSegments": "C:\\Users\\finni\\.nuget\\packages\\awssdk.extensions.netcore.setup\\4.0.2.1\\ConfigurationSchema.json;C:\\Users\\finni\\.nuget\\packages\\aspire.stackexchange.redis\\9.4.1\\ConfigurationSchema.json;C:\\Users\\finni\\.nuget\\packages\\aspire.npgsql.entityframeworkcore.postgresql\\9.4.1\\ConfigurationSchema.json;C:\\Users\\finni\\.nuget\\packages\\aspire.hosting.apphost\\9.4.1\\AspireAppHostConfiguration.json"
}
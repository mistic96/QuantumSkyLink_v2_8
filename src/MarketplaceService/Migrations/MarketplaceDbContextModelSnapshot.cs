// <auto-generated />
using System;
using MarketplaceService.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace MarketplaceService.Migrations
{
    [DbContext(typeof(MarketplaceDbContext))]
    partial class MarketplaceDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("MarketplaceService.Data.Entities.EscrowAccount", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("ApprovalNotes")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<DateTime?>("ApprovedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("ApprovedByUserId")
                        .HasColumnType("uuid");

                    b.Property<string>("AssetSymbol")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.Property<int>("AssetType")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("AutoReleaseAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("AutoReleaseDelayHours")
                        .HasColumnType("integer");

                    b.Property<bool>("AutoReleaseEnabled")
                        .HasColumnType("boolean");

                    b.Property<Guid>("BuyerId")
                        .HasColumnType("uuid");

                    b.Property<string>("CancellationReason")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<DateTime?>("CancelledAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("Currency")
                        .IsRequired()
                        .HasMaxLength(3)
                        .HasColumnType("character varying(3)");

                    b.Property<decimal>("DisputeFee")
                        .HasColumnType("decimal(18,8)");

                    b.Property<DateTime?>("DisputeInitiatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("DisputeInitiatedBy")
                        .HasColumnType("uuid");

                    b.Property<string>("DisputeReason")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<string>("DisputeResolution")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<DateTime?>("DisputeResolvedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("DisputeResolvedBy")
                        .HasColumnType("uuid");

                    b.Property<decimal>("EscrowAmount")
                        .HasColumnType("decimal(18,8)");

                    b.Property<string>("EscrowConditions")
                        .IsRequired()
                        .HasColumnType("jsonb");

                    b.Property<decimal>("EscrowFee")
                        .HasColumnType("decimal(18,8)");

                    b.Property<DateTime?>("ExpiresAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("FundedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsDisputed")
                        .HasColumnType("boolean");

                    b.Property<string>("LastReleaseError")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<string>("LockTransactionHash")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<DateTime?>("LockedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("MaxReleaseAttempts")
                        .HasColumnType("integer");

                    b.Property<string>("Metadata")
                        .IsRequired()
                        .HasColumnType("jsonb");

                    b.Property<decimal>("NetReleaseAmount")
                        .HasColumnType("decimal(18,8)");

                    b.Property<Guid>("OrderId")
                        .HasColumnType("uuid");

                    b.Property<string>("PaymentTransactionId")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<int>("ReleaseAttempts")
                        .HasColumnType("integer");

                    b.Property<string>("ReleaseTransactionHash")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<DateTime?>("ReleasedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("RequiresManualApproval")
                        .HasColumnType("boolean");

                    b.Property<Guid>("SellerId")
                        .HasColumnType("uuid");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<Guid?>("TokenId")
                        .HasColumnType("uuid");

                    b.Property<decimal>("TokenQuantity")
                        .HasColumnType("decimal(28,8)");

                    b.Property<decimal>("TotalFees")
                        .HasColumnType("decimal(18,8)");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("WalletAddress")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.HasKey("Id");

                    b.HasIndex("BuyerId");

                    b.HasIndex("CreatedAt");

                    b.HasIndex("ExpiresAt");

                    b.HasIndex("OrderId")
                        .IsUnique();

                    b.HasIndex("SellerId");

                    b.HasIndex("Status");

                    b.ToTable("EscrowAccounts", t =>
                        {
                            t.HasCheckConstraint("CK_EscrowAccount_AutoReleaseDelayHours_Positive", "\"AutoReleaseDelayHours\" > 0");

                            t.HasCheckConstraint("CK_EscrowAccount_EscrowAmount_Positive", "\"EscrowAmount\" > 0");

                            t.HasCheckConstraint("CK_EscrowAccount_MaxReleaseAttempts_Positive", "\"MaxReleaseAttempts\" > 0");

                            t.HasCheckConstraint("CK_EscrowAccount_PlatformToken_TokenId", "(\"AssetType\" = 1 AND \"TokenId\" IS NOT NULL) OR (\"AssetType\" != 1 AND \"AssetSymbol\" IS NOT NULL)");

                            t.HasCheckConstraint("CK_EscrowAccount_ReleaseAttempts_NonNegative", "\"ReleaseAttempts\" >= 0");

                            t.HasCheckConstraint("CK_EscrowAccount_TokenQuantity_Positive", "\"TokenQuantity\" > 0");
                        });
                });

            modelBuilder.Entity("MarketplaceService.Data.Entities.EscrowHistory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Action")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("ActionDetails")
                        .IsRequired()
                        .HasColumnType("jsonb");

                    b.Property<decimal?>("Amount")
                        .HasColumnType("decimal(18,8)");

                    b.Property<string>("ClientIpAddress")
                        .HasMaxLength(45)
                        .HasColumnType("character varying(45)");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("Currency")
                        .HasMaxLength(3)
                        .HasColumnType("character varying(3)");

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<string>("ErrorMessage")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<Guid>("EscrowAccountId")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsSystemAction")
                        .HasColumnType("boolean");

                    b.Property<string>("Metadata")
                        .IsRequired()
                        .HasColumnType("jsonb");

                    b.Property<Guid?>("PerformedByUserId")
                        .HasColumnType("uuid");

                    b.Property<int?>("PreviousStatus")
                        .HasColumnType("integer");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<string>("SystemComponent")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("TransactionHash")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("UserAgent")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.HasKey("Id");

                    b.HasIndex("CreatedAt");

                    b.HasIndex("EscrowAccountId");

                    b.HasIndex("Status");

                    b.ToTable("EscrowHistory", t =>
                        {
                            t.HasCheckConstraint("CK_EscrowHistory_Amount_Positive", "\"Amount\" IS NULL OR \"Amount\" > 0");
                        });
                });

            modelBuilder.Entity("MarketplaceService.Data.Entities.MarketListing", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("ActivatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("AssetSymbol")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.Property<int>("AssetType")
                        .HasColumnType("integer");

                    b.Property<decimal?>("BasePrice")
                        .HasColumnType("decimal(18,8)");

                    b.Property<decimal>("CommissionPercentage")
                        .HasColumnType("decimal(5,4)");

                    b.Property<DateTime?>("CompletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("ContactInfo")
                        .HasColumnType("jsonb");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("Currency")
                        .IsRequired()
                        .HasMaxLength(3)
                        .HasColumnType("character varying(3)");

                    b.Property<string>("Description")
                        .HasMaxLength(2000)
                        .HasColumnType("character varying(2000)");

                    b.Property<string>("DocumentationUrl")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<DateTime?>("ExpiresAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsFeatured")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsVerified")
                        .HasColumnType("boolean");

                    b.Property<decimal>("ListingFee")
                        .HasColumnType("decimal(18,8)");

                    b.Property<int>("MarketType")
                        .HasColumnType("integer");

                    b.Property<decimal?>("MaximumPurchaseQuantity")
                        .HasColumnType("decimal(28,8)");

                    b.Property<string>("Metadata")
                        .IsRequired()
                        .HasColumnType("jsonb");

                    b.Property<decimal>("MinimumPurchaseQuantity")
                        .HasColumnType("decimal(28,8)");

                    b.Property<int>("OrderCount")
                        .HasColumnType("integer");

                    b.Property<string>("PricingConfiguration")
                        .IsRequired()
                        .HasColumnType("jsonb");

                    b.Property<int>("PricingStrategy")
                        .HasColumnType("integer");

                    b.Property<decimal>("RemainingQuantity")
                        .HasColumnType("decimal(28,8)");

                    b.Property<string>("RoadmapUrl")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<Guid>("SellerId")
                        .HasColumnType("uuid");

                    b.Property<string>("SocialLinks")
                        .HasColumnType("jsonb");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<string>("Tags")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<Guid?>("TokenId")
                        .HasColumnType("uuid");

                    b.Property<decimal>("TotalQuantity")
                        .HasColumnType("decimal(28,8)");

                    b.Property<decimal>("TotalRevenue")
                        .HasColumnType("decimal(18,8)");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<long>("ViewCount")
                        .HasColumnType("bigint");

                    b.Property<decimal>("VolumeSold")
                        .HasColumnType("decimal(28,8)");

                    b.Property<string>("WebsiteUrl")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<string>("WhitepaperUrl")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.HasKey("Id");

                    b.HasIndex("AssetType");

                    b.HasIndex("CreatedAt");

                    b.HasIndex("ExpiresAt");

                    b.HasIndex("MarketType");

                    b.HasIndex("PricingStrategy");

                    b.HasIndex("SellerId");

                    b.HasIndex("Status");

                    b.HasIndex("TokenId");

                    b.ToTable("MarketListings", t =>
                        {
                            t.HasCheckConstraint("CK_MarketListing_BasePrice_Positive", "\"BasePrice\" IS NULL OR \"BasePrice\" > 0");

                            t.HasCheckConstraint("CK_MarketListing_CommissionPercentage_Range", "\"CommissionPercentage\" >= 0 AND \"CommissionPercentage\" <= 1");

                            t.HasCheckConstraint("CK_MarketListing_MinimumPurchaseQuantity_Positive", "\"MinimumPurchaseQuantity\" > 0");

                            t.HasCheckConstraint("CK_MarketListing_PlatformToken_TokenId", "(\"AssetType\" = 1 AND \"TokenId\" IS NOT NULL) OR (\"AssetType\" != 1 AND \"AssetSymbol\" IS NOT NULL)");

                            t.HasCheckConstraint("CK_MarketListing_RemainingQuantity_LessOrEqual_Total", "\"RemainingQuantity\" <= \"TotalQuantity\"");

                            t.HasCheckConstraint("CK_MarketListing_RemainingQuantity_NonNegative", "\"RemainingQuantity\" >= 0");

                            t.HasCheckConstraint("CK_MarketListing_TotalQuantity_Positive", "\"TotalQuantity\" > 0");
                        });
                });

            modelBuilder.Entity("MarketplaceService.Data.Entities.MarketplaceOrder", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("BlockchainTransactionHash")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<Guid>("BuyerId")
                        .HasColumnType("uuid");

                    b.Property<string>("BuyerNotes")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<string>("CancellationReason")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<DateTime?>("CancelledAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("ClientIpAddress")
                        .HasMaxLength(45)
                        .HasColumnType("character varying(45)");

                    b.Property<DateTime?>("CompletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("ConfirmedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("Currency")
                        .IsRequired()
                        .HasMaxLength(3)
                        .HasColumnType("character varying(3)");

                    b.Property<Guid?>("EscrowAccountId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("EstimatedCompletionAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("ExpiresAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("FailureReason")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<decimal>("FinalAmount")
                        .HasColumnType("decimal(18,8)");

                    b.Property<string>("IdempotencyKey")
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)");

                    b.Property<bool>("IsReviewed")
                        .HasColumnType("boolean");

                    b.Property<Guid>("ListingId")
                        .HasColumnType("uuid");

                    b.Property<int>("MaxRetryAttempts")
                        .HasColumnType("integer");

                    b.Property<string>("Metadata")
                        .IsRequired()
                        .HasColumnType("jsonb");

                    b.Property<DateTime?>("PaidAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("PaymentTransactionId")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<decimal>("PlatformFee")
                        .HasColumnType("decimal(18,8)");

                    b.Property<decimal>("PricePerToken")
                        .HasColumnType("decimal(18,8)");

                    b.Property<string>("PricingDetails")
                        .IsRequired()
                        .HasColumnType("jsonb");

                    b.Property<decimal>("Quantity")
                        .HasColumnType("decimal(28,8)");

                    b.Property<bool>("RequiresManualReview")
                        .HasColumnType("boolean");

                    b.Property<int>("RetryCount")
                        .HasColumnType("integer");

                    b.Property<string>("ReviewNotes")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<DateTime?>("ReviewedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("ReviewedByAdminId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("SellerId")
                        .HasColumnType("uuid");

                    b.Property<string>("SellerNotes")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<decimal?>("SellerProceeds")
                        .HasColumnType("decimal(18,8)");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<decimal>("TotalAmount")
                        .HasColumnType("decimal(18,8)");

                    b.Property<decimal>("TotalFees")
                        .HasColumnType("decimal(18,8)");

                    b.Property<decimal>("TransactionFee")
                        .HasColumnType("decimal(18,8)");

                    b.Property<int>("TransactionType")
                        .HasColumnType("integer");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("UserAgent")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.HasKey("Id");

                    b.HasIndex("BuyerId");

                    b.HasIndex("CompletedAt");

                    b.HasIndex("CreatedAt");

                    b.HasIndex("ListingId");

                    b.HasIndex("SellerId");

                    b.HasIndex("Status");

                    b.HasIndex("TransactionType");

                    b.HasIndex("BuyerId", "ListingId", "IdempotencyKey")
                        .IsUnique();

                    b.ToTable("MarketplaceOrders", t =>
                        {
                            t.HasCheckConstraint("CK_MarketplaceOrder_FinalAmount_Positive", "\"FinalAmount\" > 0");

                            t.HasCheckConstraint("CK_MarketplaceOrder_MaxRetryAttempts_Positive", "\"MaxRetryAttempts\" > 0");

                            t.HasCheckConstraint("CK_MarketplaceOrder_PricePerToken_Positive", "\"PricePerToken\" > 0");

                            t.HasCheckConstraint("CK_MarketplaceOrder_Quantity_Positive", "\"Quantity\" > 0");

                            t.HasCheckConstraint("CK_MarketplaceOrder_RetryCount_NonNegative", "\"RetryCount\" >= 0");

                            t.HasCheckConstraint("CK_MarketplaceOrder_TotalAmount_Positive", "\"TotalAmount\" > 0");
                        });
                });

            modelBuilder.Entity("MarketplaceService.Data.Entities.OrderHistory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Action")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("ActionDetails")
                        .IsRequired()
                        .HasColumnType("jsonb");

                    b.Property<string>("ClientIpAddress")
                        .HasMaxLength(45)
                        .HasColumnType("character varying(45)");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<string>("ErrorMessage")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<bool>("IsSystemAction")
                        .HasColumnType("boolean");

                    b.Property<string>("Metadata")
                        .IsRequired()
                        .HasColumnType("jsonb");

                    b.Property<Guid>("OrderId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("PerformedByUserId")
                        .HasColumnType("uuid");

                    b.Property<int?>("PreviousStatus")
                        .HasColumnType("integer");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<string>("SystemComponent")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("UserAgent")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.HasKey("Id");

                    b.HasIndex("CreatedAt");

                    b.HasIndex("OrderId");

                    b.HasIndex("Status");

                    b.ToTable("OrderHistory");
                });

            modelBuilder.Entity("MarketplaceService.Data.Entities.PaymentTransaction", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,8)");

                    b.Property<DateTime?>("CapturedUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("CreatedUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("MarketplaceOrderId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("OrderId")
                        .HasColumnType("uuid");

                    b.Property<string>("ProviderRef")
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(16)
                        .HasColumnType("character varying(16)");

                    b.HasKey("Id");

                    b.HasIndex("MarketplaceOrderId");

                    b.HasIndex("OrderId");

                    b.HasIndex("Status");

                    b.ToTable("PaymentTransactions", t =>
                        {
                            t.HasCheckConstraint("CK_PaymentTransaction_Amount_Positive", "\"Amount\" >= 0");
                        });
                });

            modelBuilder.Entity("MarketplaceService.Data.Entities.PriceHistory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int?>("ActiveOrders")
                        .HasColumnType("integer");

                    b.Property<string>("ChangeReason")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("Currency")
                        .IsRequired()
                        .HasMaxLength(3)
                        .HasColumnType("character varying(3)");

                    b.Property<bool>("IsAutomaticUpdate")
                        .HasColumnType("boolean");

                    b.Property<Guid>("ListingId")
                        .HasColumnType("uuid");

                    b.Property<decimal?>("MarginAmount")
                        .HasColumnType("decimal(18,8)");

                    b.Property<decimal?>("MarginPercentage")
                        .HasColumnType("decimal(5,4)");

                    b.Property<decimal?>("MarketPrice")
                        .HasColumnType("decimal(18,8)");

                    b.Property<string>("Metadata")
                        .IsRequired()
                        .HasColumnType("jsonb");

                    b.Property<decimal>("PricePerToken")
                        .HasColumnType("decimal(18,8)");

                    b.Property<string>("PricingConfiguration")
                        .IsRequired()
                        .HasColumnType("jsonb");

                    b.Property<int>("PricingStrategy")
                        .HasColumnType("integer");

                    b.Property<decimal?>("TradingVolume")
                        .HasColumnType("decimal(28,8)");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<Guid?>("UpdatedByUserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("CreatedAt");

                    b.HasIndex("ListingId");

                    b.HasIndex("PricingStrategy");

                    b.ToTable("PriceHistory", t =>
                        {
                            t.HasCheckConstraint("CK_PriceHistory_MarginPercentage_Range", "\"MarginPercentage\" IS NULL OR (\"MarginPercentage\" >= -1 AND \"MarginPercentage\" <= 10)");

                            t.HasCheckConstraint("CK_PriceHistory_MarketPrice_Positive", "\"MarketPrice\" IS NULL OR \"MarketPrice\" > 0");

                            t.HasCheckConstraint("CK_PriceHistory_PricePerToken_Positive", "\"PricePerToken\" > 0");
                        });
                });

            modelBuilder.Entity("MarketplaceService.Data.Entities.EscrowAccount", b =>
                {
                    b.HasOne("MarketplaceService.Data.Entities.MarketplaceOrder", "MarketplaceOrder")
                        .WithOne("EscrowAccount")
                        .HasForeignKey("MarketplaceService.Data.Entities.EscrowAccount", "OrderId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("MarketplaceOrder");
                });

            modelBuilder.Entity("MarketplaceService.Data.Entities.EscrowHistory", b =>
                {
                    b.HasOne("MarketplaceService.Data.Entities.EscrowAccount", "EscrowAccount")
                        .WithMany("EscrowHistory")
                        .HasForeignKey("EscrowAccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("EscrowAccount");
                });

            modelBuilder.Entity("MarketplaceService.Data.Entities.MarketplaceOrder", b =>
                {
                    b.HasOne("MarketplaceService.Data.Entities.MarketListing", "MarketListing")
                        .WithMany("Orders")
                        .HasForeignKey("ListingId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("MarketListing");
                });

            modelBuilder.Entity("MarketplaceService.Data.Entities.OrderHistory", b =>
                {
                    b.HasOne("MarketplaceService.Data.Entities.MarketplaceOrder", "MarketplaceOrder")
                        .WithMany("OrderHistory")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MarketplaceOrder");
                });

            modelBuilder.Entity("MarketplaceService.Data.Entities.PaymentTransaction", b =>
                {
                    b.HasOne("MarketplaceService.Data.Entities.MarketplaceOrder", "MarketplaceOrder")
                        .WithMany()
                        .HasForeignKey("MarketplaceOrderId");

                    b.HasOne("MarketplaceService.Data.Entities.MarketplaceOrder", null)
                        .WithMany()
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("MarketplaceOrder");
                });

            modelBuilder.Entity("MarketplaceService.Data.Entities.PriceHistory", b =>
                {
                    b.HasOne("MarketplaceService.Data.Entities.MarketListing", "MarketListing")
                        .WithMany("PriceHistory")
                        .HasForeignKey("ListingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MarketListing");
                });

            modelBuilder.Entity("MarketplaceService.Data.Entities.EscrowAccount", b =>
                {
                    b.Navigation("EscrowHistory");
                });

            modelBuilder.Entity("MarketplaceService.Data.Entities.MarketListing", b =>
                {
                    b.Navigation("Orders");

                    b.Navigation("PriceHistory");
                });

            modelBuilder.Entity("MarketplaceService.Data.Entities.MarketplaceOrder", b =>
                {
                    b.Navigation("EscrowAccount");

                    b.Navigation("OrderHistory");
                });
#pragma warning restore 612, 618
        }
    }
}

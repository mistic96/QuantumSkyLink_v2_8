// <auto-generated />
using System;
using InfrastructureService.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace InfrastructureService.Migrations
{
    [DbContext(typeof(InfrastructureDbContext))]
    [Migration("20250619092136_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("InfrastructureService.Data.Entities.Transaction", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<decimal>("Amount")
                        .HasPrecision(18, 8)
                        .HasColumnType("decimal(18,8)");

                    b.Property<long?>("BlockNumber")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("BroadcastAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("ConfirmedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("CurrentSignatures")
                        .HasColumnType("integer");

                    b.Property<string>("Data")
                        .HasMaxLength(2000)
                        .HasColumnType("character varying(2000)");

                    b.Property<string>("ErrorMessage")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<string>("FromAddress")
                        .IsRequired()
                        .HasMaxLength(42)
                        .HasColumnType("character varying(42)");

                    b.Property<long>("GasLimit")
                        .HasColumnType("bigint");

                    b.Property<decimal>("GasPrice")
                        .HasPrecision(18, 8)
                        .HasColumnType("decimal(18,8)");

                    b.Property<long?>("GasUsed")
                        .HasColumnType("bigint");

                    b.Property<string>("Hash")
                        .HasMaxLength(66)
                        .HasColumnType("character varying(66)");

                    b.Property<string>("Metadata")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<string>("Network")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.Property<long>("Nonce")
                        .HasColumnType("bigint");

                    b.Property<int>("RequiredSignatures")
                        .HasColumnType("integer");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("ToAddress")
                        .IsRequired()
                        .HasMaxLength(42)
                        .HasColumnType("character varying(42)");

                    b.Property<string>("TokenAddress")
                        .HasMaxLength(42)
                        .HasColumnType("character varying(42)");

                    b.Property<string>("TokenSymbol")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.Property<int?>("TransactionIndex")
                        .HasColumnType("integer");

                    b.Property<string>("TransactionType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("WalletId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("CreatedAt");

                    b.HasIndex("FromAddress");

                    b.HasIndex("Hash")
                        .IsUnique();

                    b.HasIndex("ToAddress");

                    b.HasIndex("WalletId", "Status");

                    b.ToTable("Transactions");
                });

            modelBuilder.Entity("InfrastructureService.Data.Entities.TransactionSignature", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("R")
                        .HasMaxLength(66)
                        .HasColumnType("character varying(66)");

                    b.Property<DateTime?>("RejectedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("RejectionReason")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<string>("S")
                        .HasMaxLength(66)
                        .HasColumnType("character varying(66)");

                    b.Property<string>("Signature")
                        .HasMaxLength(132)
                        .HasColumnType("character varying(132)");

                    b.Property<string>("SignatureData")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<DateTime?>("SignedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("SignerAddress")
                        .IsRequired()
                        .HasMaxLength(42)
                        .HasColumnType("character varying(42)");

                    b.Property<Guid>("SignerId")
                        .HasColumnType("uuid");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<Guid>("TransactionId")
                        .HasColumnType("uuid");

                    b.Property<int?>("V")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("SignerId");

                    b.HasIndex("Status");

                    b.HasIndex("TransactionId", "SignerId")
                        .IsUnique();

                    b.ToTable("TransactionSignatures");
                });

            modelBuilder.Entity("InfrastructureService.Data.Entities.Wallet", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(42)
                        .HasColumnType("character varying(42)");

                    b.Property<decimal>("Balance")
                        .HasPrecision(18, 8)
                        .HasColumnType("decimal(18,8)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("DerivationPath")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("EncryptedPrivateKey")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<DateTime?>("LastTransactionAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<decimal>("LockedBalance")
                        .HasPrecision(18, 8)
                        .HasColumnType("decimal(18,8)");

                    b.Property<string>("Metadata")
                        .HasMaxLength(2000)
                        .HasColumnType("character varying(2000)");

                    b.Property<string>("Network")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.Property<string>("PublicKey")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<int>("RequiredSignatures")
                        .HasColumnType("integer");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<int>("TotalSigners")
                        .HasColumnType("integer");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.Property<string>("WalletType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("Id");

                    b.HasIndex("Address")
                        .IsUnique();

                    b.HasIndex("Status");

                    b.HasIndex("UserId", "WalletType");

                    b.ToTable("Wallets");
                });

            modelBuilder.Entity("InfrastructureService.Data.Entities.WalletBalance", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<decimal>("AvailableBalance")
                        .HasPrecision(18, 8)
                        .HasColumnType("decimal(18,8)");

                    b.Property<decimal>("Balance")
                        .HasPrecision(18, 8)
                        .HasColumnType("decimal(18,8)");

                    b.Property<DateTime?>("LastSyncedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("LastUpdated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<decimal>("LockedBalance")
                        .HasPrecision(18, 8)
                        .HasColumnType("decimal(18,8)");

                    b.Property<string>("Metadata")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<string>("TokenAddress")
                        .HasMaxLength(42)
                        .HasColumnType("character varying(42)");

                    b.Property<int>("TokenDecimals")
                        .HasColumnType("integer");

                    b.Property<string>("TokenName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<decimal?>("TokenPrice")
                        .HasPrecision(18, 8)
                        .HasColumnType("decimal(18,8)");

                    b.Property<string>("TokenSymbol")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.Property<decimal?>("UsdValue")
                        .HasPrecision(18, 8)
                        .HasColumnType("decimal(18,8)");

                    b.Property<Guid>("WalletId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("TokenAddress");

                    b.HasIndex("WalletId", "TokenSymbol")
                        .IsUnique();

                    b.ToTable("WalletBalances");
                });

            modelBuilder.Entity("InfrastructureService.Data.Entities.WalletSigner", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("LastSignedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Permissions")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<string>("PublicKey")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("SignerAddress")
                        .IsRequired()
                        .HasMaxLength(42)
                        .HasColumnType("character varying(42)");

                    b.Property<int>("SigningWeight")
                        .HasColumnType("integer");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("WalletId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("Status");

                    b.HasIndex("WalletId", "UserId")
                        .IsUnique();

                    b.ToTable("WalletSigners");
                });

            modelBuilder.Entity("InfrastructureService.Data.Entities.Transaction", b =>
                {
                    b.HasOne("InfrastructureService.Data.Entities.Wallet", "Wallet")
                        .WithMany("Transactions")
                        .HasForeignKey("WalletId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Wallet");
                });

            modelBuilder.Entity("InfrastructureService.Data.Entities.TransactionSignature", b =>
                {
                    b.HasOne("InfrastructureService.Data.Entities.WalletSigner", "Signer")
                        .WithMany("Signatures")
                        .HasForeignKey("SignerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("InfrastructureService.Data.Entities.Transaction", "Transaction")
                        .WithMany("Signatures")
                        .HasForeignKey("TransactionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Signer");

                    b.Navigation("Transaction");
                });

            modelBuilder.Entity("InfrastructureService.Data.Entities.WalletBalance", b =>
                {
                    b.HasOne("InfrastructureService.Data.Entities.Wallet", "Wallet")
                        .WithMany("Balances")
                        .HasForeignKey("WalletId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Wallet");
                });

            modelBuilder.Entity("InfrastructureService.Data.Entities.WalletSigner", b =>
                {
                    b.HasOne("InfrastructureService.Data.Entities.Wallet", "Wallet")
                        .WithMany("Signers")
                        .HasForeignKey("WalletId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Wallet");
                });

            modelBuilder.Entity("InfrastructureService.Data.Entities.Transaction", b =>
                {
                    b.Navigation("Signatures");
                });

            modelBuilder.Entity("InfrastructureService.Data.Entities.Wallet", b =>
                {
                    b.Navigation("Balances");

                    b.Navigation("Signers");

                    b.Navigation("Transactions");
                });

            modelBuilder.Entity("InfrastructureService.Data.Entities.WalletSigner", b =>
                {
                    b.Navigation("Signatures");
                });
#pragma warning restore 612, 618
        }
    }
}

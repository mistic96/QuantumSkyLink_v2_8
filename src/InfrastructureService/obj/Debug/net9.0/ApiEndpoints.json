[
  {
    "ContainingType": "InfrastructureService.Controllers.BlockchainAddressController",
    "Method": "GenerateAddressAsync",
    "RelativePath": "api/BlockchainAddress/generate",
    "HttpMethod": "POST",
    "IsController": true,
    "Order": 0,
    "Parameters": [
      {
        "Name": "request",
        "Type": "InfrastructureService.Models.Requests.GenerateAddressRequest",
        "IsRequired": true
      }
    ],
    "ReturnTypes": [
      {
        "Type": "InfrastructureService.Models.Responses.GenerateAddressResponse",
        "MediaTypes": [
          "application/json"
        ],
        "StatusCode": 200
      },
      {
        "Type": "Microsoft.AspNetCore.Mvc.ProblemDetails",
        "MediaTypes": [
          "application/json"
        ],
        "StatusCode": 400
      },
      {
        "Type": "Microsoft.AspNetCore.Mvc.ProblemDetails",
        "MediaTypes": [
          "application/json"
        ],
        "StatusCode": 500
      }
    ]
  },
  {
    "ContainingType": "InfrastructureService.Controllers.BlockchainAddressController",
    "Method": "GenerateAddressesForAllServicesAsync",
    "RelativePath": "api/BlockchainAddress/generate/all-services/{networkType}",
    "HttpMethod": "POST",
    "IsController": true,
    "Order": 0,
    "Parameters": [
      {
        "Name": "networkType",
        "Type": "System.String",
        "IsRequired": true
      }
    ],
    "ReturnTypes": [
      {
        "Type": "InfrastructureService.Models.Responses.BulkGenerateAddressResponse",
        "MediaTypes": [
          "application/json"
        ],
        "StatusCode": 200
      },
      {
        "Type": "Microsoft.AspNetCore.Mvc.ProblemDetails",
        "MediaTypes": [
          "application/json"
        ],
        "StatusCode": 400
      },
      {
        "Type": "Microsoft.AspNetCore.Mvc.ProblemDetails",
        "MediaTypes": [
          "application/json"
        ],
        "StatusCode": 500
      }
    ]
  },
  {
    "ContainingType": "InfrastructureService.Controllers.BlockchainAddressController",
    "Method": "BulkGenerateAddressesAsync",
    "RelativePath": "api/BlockchainAddress/generate/bulk",
    "HttpMethod": "POST",
    "IsController": true,
    "Order": 0,
    "Parameters": [
      {
        "Name": "request",
        "Type": "InfrastructureService.Models.Requests.BulkGenerateAddressRequest",
        "IsRequired": true
      }
    ],
    "ReturnTypes": [
      {
        "Type": "InfrastructureService.Models.Responses.BulkGenerateAddressResponse",
        "MediaTypes": [
          "application/json"
        ],
        "StatusCode": 200
      },
      {
        "Type": "Microsoft.AspNetCore.Mvc.ProblemDetails",
        "MediaTypes": [
          "application/json"
        ],
        "StatusCode": 400
      },
      {
        "Type": "Microsoft.AspNetCore.Mvc.ProblemDetails",
        "MediaTypes": [
          "application/json"
        ],
        "StatusCode": 500
      }
    ]
  },
  {
    "ContainingType": "InfrastructureService.Controllers.BlockchainAddressController",
    "Method": "GetHealth",
    "RelativePath": "api/BlockchainAddress/health",
    "HttpMethod": "GET",
    "IsController": true,
    "Order": 0,
    "Parameters": [],
    "ReturnTypes": [
      {
        "Type": "System.Object",
        "MediaTypes": [
          "application/json"
        ],
        "StatusCode": 200
      }
    ]
  },
  {
    "ContainingType": "InfrastructureService.Controllers.BlockchainAddressController",
    "Method": "GetAddressInfoAsync",
    "RelativePath": "api/BlockchainAddress/info",
    "HttpMethod": "POST",
    "IsController": true,
    "Order": 0,
    "Parameters": [
      {
        "Name": "request",
        "Type": "InfrastructureService.Models.Requests.GetAddressInfoRequest",
        "IsRequired": true
      }
    ],
    "ReturnTypes": [
      {
        "Type": "InfrastructureService.Models.Responses.AddressInfoResponse",
        "MediaTypes": [
          "application/json"
        ],
        "StatusCode": 200
      },
      {
        "Type": "Microsoft.AspNetCore.Mvc.ProblemDetails",
        "MediaTypes": [
          "application/json"
        ],
        "StatusCode": 400
      },
      {
        "Type": "Microsoft.AspNetCore.Mvc.ProblemDetails",
        "MediaTypes": [
          "application/json"
        ],
        "StatusCode": 404
      },
      {
        "Type": "Microsoft.AspNetCore.Mvc.ProblemDetails",
        "MediaTypes": [
          "application/json"
        ],
        "StatusCode": 500
      }
    ]
  },
  {
    "ContainingType": "InfrastructureService.Controllers.BlockchainAddressController",
    "Method": "GetGenerationMetricsAsync",
    "RelativePath": "api/BlockchainAddress/metrics",
    "HttpMethod": "GET",
    "IsController": true,
    "Order": 0,
    "Parameters": [],
    "ReturnTypes": [
      {
        "Type": "InfrastructureService.Models.Responses.AddressGenerationMetricsResponse",
        "MediaTypes": [
          "application/json"
        ],
        "StatusCode": 200
      },
      {
        "Type": "Microsoft.AspNetCore.Mvc.ProblemDetails",
        "MediaTypes": [
          "application/json"
        ],
        "StatusCode": 500
      }
    ]
  },
  {
    "ContainingType": "InfrastructureService.Controllers.BlockchainAddressController",
    "Method": "GetNetworkStatsAsync",
    "RelativePath": "api/BlockchainAddress/network-stats/{networkType}",
    "HttpMethod": "GET",
    "IsController": true,
    "Order": 0,
    "Parameters": [
      {
        "Name": "networkType",
        "Type": "System.String",
        "IsRequired": true
      }
    ],
    "ReturnTypes": [
      {
        "Type": "InfrastructureService.Models.Responses.NetworkStatsResponse",
        "MediaTypes": [
          "application/json"
        ],
        "StatusCode": 200
      },
      {
        "Type": "Microsoft.AspNetCore.Mvc.ProblemDetails",
        "MediaTypes": [
          "application/json"
        ],
        "StatusCode": 400
      },
      {
        "Type": "Microsoft.AspNetCore.Mvc.ProblemDetails",
        "MediaTypes": [
          "application/json"
        ],
        "StatusCode": 500
      }
    ]
  },
  {
    "ContainingType": "InfrastructureService.Controllers.BlockchainAddressController",
    "Method": "ValidateAddressAsync",
    "RelativePath": "api/BlockchainAddress/validate",
    "HttpMethod": "POST",
    "IsController": true,
    "Order": 0,
    "Parameters": [
      {
        "Name": "request",
        "Type": "InfrastructureService.Models.Requests.ValidateAddressRequest",
        "IsRequired": true
      }
    ],
    "ReturnTypes": [
      {
        "Type": "InfrastructureService.Models.Responses.ValidateAddressResponse",
        "MediaTypes": [
          "application/json"
        ],
        "StatusCode": 200
      },
      {
        "Type": "Microsoft.AspNetCore.Mvc.ProblemDetails",
        "MediaTypes": [
          "application/json"
        ],
        "StatusCode": 400
      },
      {
        "Type": "Microsoft.AspNetCore.Mvc.ProblemDetails",
        "MediaTypes": [
          "application/json"
        ],
        "StatusCode": 500
      }
    ]
  },
  {
    "ContainingType": "InfrastructureService.Controllers.InfrastructureController",
    "Method": "GetCurrentGasPrice",
    "RelativePath": "api/Infrastructure/blockchain/gas-price",
    "HttpMethod": "GET",
    "IsController": true,
    "Order": 0,
    "Parameters": [
      {
        "Name": "network",
        "Type": "System.String",
        "IsRequired": false
      }
    ],
    "ReturnTypes": [
      {
        "Type": "System.Decimal",
        "MediaTypes": [
          "text/plain",
          "application/json",
          "text/json"
        ],
        "StatusCode": 200
      }
    ]
  },
  {
    "ContainingType": "InfrastructureService.Controllers.InfrastructureController",
    "Method": "ValidateAddress",
    "RelativePath": "api/Infrastructure/blockchain/validate-address",
    "HttpMethod": "GET",
    "IsController": true,
    "Order": 0,
    "Parameters": [
      {
        "Name": "address",
        "Type": "System.String",
        "IsRequired": false
      },
      {
        "Name": "network",
        "Type": "System.String",
        "IsRequired": false
      }
    ],
    "ReturnTypes": [
      {
        "Type": "System.Boolean",
        "MediaTypes": [
          "text/plain",
          "application/json",
          "text/json"
        ],
        "StatusCode": 200
      }
    ]
  },
  {
    "ContainingType": "InfrastructureService.Controllers.InfrastructureController",
    "Method": "BroadcastSignedTransaction",
    "RelativePath": "api/Infrastructure/broadcast",
    "HttpMethod": "POST",
    "IsController": true,
    "Order": 0,
    "Parameters": [
      {
        "Name": "request",
        "Type": "InfrastructureService.Models.Requests.BroadcastSignedTransactionRequest",
        "IsRequired": true
      }
    ],
    "ReturnTypes": [
      {
        "Type": "InfrastructureService.Models.Responses.BroadcastResponse",
        "MediaTypes": [
          "text/plain",
          "application/json",
          "text/json"
        ],
        "StatusCode": 200
      }
    ]
  },
  {
    "ContainingType": "InfrastructureService.Controllers.InfrastructureController",
    "Method": "GetNetworkStats",
    "RelativePath": "api/Infrastructure/stats/networks",
    "HttpMethod": "GET",
    "IsController": true,
    "Order": 0,
    "Parameters": [],
    "ReturnTypes": [
      {
        "Type": "System.Collections.Generic.List\u00601[[InfrastructureService.Models.Responses.NetworkStatsResponse, InfrastructureService, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]",
        "MediaTypes": [
          "text/plain",
          "application/json",
          "text/json"
        ],
        "StatusCode": 200
      }
    ]
  },
  {
    "ContainingType": "InfrastructureService.Controllers.InfrastructureController",
    "Method": "GetWalletStats",
    "RelativePath": "api/Infrastructure/stats/wallets",
    "HttpMethod": "GET",
    "IsController": true,
    "Order": 0,
    "Parameters": [],
    "ReturnTypes": [
      {
        "Type": "InfrastructureService.Models.Responses.WalletStatsResponse",
        "MediaTypes": [
          "text/plain",
          "application/json",
          "text/json"
        ],
        "StatusCode": 200
      }
    ]
  },
  {
    "ContainingType": "InfrastructureService.Controllers.InfrastructureController",
    "Method": "CreateWallet",
    "RelativePath": "api/Infrastructure/wallets",
    "HttpMethod": "POST",
    "IsController": true,
    "Order": 0,
    "Parameters": [
      {
        "Name": "request",
        "Type": "InfrastructureService.Models.Requests.CreateWalletRequest",
        "IsRequired": true
      }
    ],
    "ReturnTypes": [
      {
        "Type": "InfrastructureService.Models.Responses.WalletResponse",
        "MediaTypes": [
          "text/plain",
          "application/json",
          "text/json"
        ],
        "StatusCode": 200
      }
    ]
  },
  {
    "ContainingType": "InfrastructureService.Controllers.InfrastructureController",
    "Method": "GetUserWallets",
    "RelativePath": "api/Infrastructure/wallets",
    "HttpMethod": "GET",
    "IsController": true,
    "Order": 0,
    "Parameters": [],
    "ReturnTypes": [
      {
        "Type": "System.Collections.Generic.List\u00601[[InfrastructureService.Models.Responses.WalletResponse, InfrastructureService, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]",
        "MediaTypes": [
          "text/plain",
          "application/json",
          "text/json"
        ],
        "StatusCode": 200
      }
    ]
  },
  {
    "ContainingType": "InfrastructureService.Controllers.InfrastructureController",
    "Method": "GetWallet",
    "RelativePath": "api/Infrastructure/wallets/{walletId}",
    "HttpMethod": "GET",
    "IsController": true,
    "Order": 0,
    "Parameters": [
      {
        "Name": "walletId",
        "Type": "System.Guid",
        "IsRequired": true
      }
    ],
    "ReturnTypes": [
      {
        "Type": "InfrastructureService.Models.Responses.WalletResponse",
        "MediaTypes": [
          "text/plain",
          "application/json",
          "text/json"
        ],
        "StatusCode": 200
      }
    ]
  },
  {
    "ContainingType": "InfrastructureService.Controllers.InfrastructureController",
    "Method": "DeleteWallet",
    "RelativePath": "api/Infrastructure/wallets/{walletId}",
    "HttpMethod": "DELETE",
    "IsController": true,
    "Order": 0,
    "Parameters": [
      {
        "Name": "walletId",
        "Type": "System.Guid",
        "IsRequired": true
      }
    ],
    "ReturnTypes": []
  },
  {
    "ContainingType": "InfrastructureService.Controllers.InfrastructureController",
    "Method": "GetWalletBalances",
    "RelativePath": "api/Infrastructure/wallets/{walletId}/balances",
    "HttpMethod": "GET",
    "IsController": true,
    "Order": 0,
    "Parameters": [
      {
        "Name": "walletId",
        "Type": "System.Guid",
        "IsRequired": true
      }
    ],
    "ReturnTypes": [
      {
        "Type": "System.Collections.Generic.List\u00601[[InfrastructureService.Models.Responses.WalletBalanceResponse, InfrastructureService, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]",
        "MediaTypes": [
          "text/plain",
          "application/json",
          "text/json"
        ],
        "StatusCode": 200
      }
    ]
  },
  {
    "ContainingType": "InfrastructureService.Controllers.InfrastructureController",
    "Method": "GetWalletBalance",
    "RelativePath": "api/Infrastructure/wallets/{walletId}/balances/{tokenSymbol}",
    "HttpMethod": "GET",
    "IsController": true,
    "Order": 0,
    "Parameters": [
      {
        "Name": "walletId",
        "Type": "System.Guid",
        "IsRequired": true
      },
      {
        "Name": "tokenSymbol",
        "Type": "System.String",
        "IsRequired": true
      }
    ],
    "ReturnTypes": [
      {
        "Type": "InfrastructureService.Models.Responses.WalletBalanceResponse",
        "MediaTypes": [
          "text/plain",
          "application/json",
          "text/json"
        ],
        "StatusCode": 200
      }
    ]
  },
  {
    "ContainingType": "InfrastructureService.Controllers.InfrastructureController",
    "Method": "UpdateWalletStatus",
    "RelativePath": "api/Infrastructure/wallets/{walletId}/status",
    "HttpMethod": "PUT",
    "IsController": true,
    "Order": 0,
    "Parameters": [
      {
        "Name": "walletId",
        "Type": "System.Guid",
        "IsRequired": true
      },
      {
        "Name": "request",
        "Type": "InfrastructureService.Controllers.UpdateWalletStatusRequest",
        "IsRequired": true
      }
    ],
    "ReturnTypes": [
      {
        "Type": "InfrastructureService.Models.Responses.WalletResponse",
        "MediaTypes": [
          "text/plain",
          "application/json",
          "text/json"
        ],
        "StatusCode": 200
      }
    ]
  },
  {
    "ContainingType": "InfrastructureService.Controllers.InfrastructureController",
    "Method": "SyncWalletBalances",
    "RelativePath": "api/Infrastructure/wallets/{walletId}/sync-balances",
    "HttpMethod": "POST",
    "IsController": true,
    "Order": 0,
    "Parameters": [
      {
        "Name": "walletId",
        "Type": "System.Guid",
        "IsRequired": true
      }
    ],
    "ReturnTypes": []
  },
  {
    "ContainingType": "InfrastructureService.Controllers.InfrastructureController",
    "Method": "GetWalletByAddress",
    "RelativePath": "api/Infrastructure/wallets/address/{address}",
    "HttpMethod": "GET",
    "IsController": true,
    "Order": 0,
    "Parameters": [
      {
        "Name": "address",
        "Type": "System.String",
        "IsRequired": true
      }
    ],
    "ReturnTypes": [
      {
        "Type": "InfrastructureService.Models.Responses.WalletResponse",
        "MediaTypes": [
          "text/plain",
          "application/json",
          "text/json"
        ],
        "StatusCode": 200
      }
    ]
  },
  {
    "ContainingType": "InfrastructureService.Controllers.MultiNetworkController",
    "Method": "ConfigureNetworkAsync",
    "RelativePath": "api/MultiNetwork/configure",
    "HttpMethod": "POST",
    "IsController": true,
    "Order": 0,
    "Parameters": [
      {
        "Name": "request",
        "Type": "InfrastructureService.Models.Requests.NetworkConfigurationRequest",
        "IsRequired": true
      }
    ],
    "ReturnTypes": [
      {
        "Type": "InfrastructureService.Models.Responses.NetworkConfigurationResponse",
        "MediaTypes": [
          "application/json"
        ],
        "StatusCode": 200
      },
      {
        "Type": "Microsoft.AspNetCore.Mvc.ProblemDetails",
        "MediaTypes": [
          "application/json"
        ],
        "StatusCode": 400
      },
      {
        "Type": "Microsoft.AspNetCore.Mvc.ProblemDetails",
        "MediaTypes": [
          "application/json"
        ],
        "StatusCode": 500
      }
    ]
  },
  {
    "ContainingType": "InfrastructureService.Controllers.MultiNetworkController",
    "Method": "GenerateMultiNetworkAddressesAsync",
    "RelativePath": "api/MultiNetwork/generate",
    "HttpMethod": "POST",
    "IsController": true,
    "Order": 0,
    "Parameters": [
      {
        "Name": "request",
        "Type": "InfrastructureService.Models.Requests.MultiNetworkGenerateRequest",
        "IsRequired": true
      }
    ],
    "ReturnTypes": [
      {
        "Type": "InfrastructureService.Models.Responses.MultiNetworkGenerateResponse",
        "MediaTypes": [
          "application/json"
        ],
        "StatusCode": 200
      },
      {
        "Type": "Microsoft.AspNetCore.Mvc.ProblemDetails",
        "MediaTypes": [
          "application/json"
        ],
        "StatusCode": 400
      },
      {
        "Type": "Microsoft.AspNetCore.Mvc.ProblemDetails",
        "MediaTypes": [
          "application/json"
        ],
        "StatusCode": 500
      }
    ]
  },
  {
    "ContainingType": "InfrastructureService.Controllers.MultiNetworkController",
    "Method": "GetCrossNetworkMetadataAsync",
    "RelativePath": "api/MultiNetwork/metadata/cross-network",
    "HttpMethod": "POST",
    "IsController": true,
    "Order": 0,
    "Parameters": [
      {
        "Name": "request",
        "Type": "InfrastructureService.Models.Requests.CrossNetworkMetadataRequest",
        "IsRequired": true
      }
    ],
    "ReturnTypes": [
      {
        "Type": "InfrastructureService.Models.Responses.CrossNetworkMetadataResponse",
        "MediaTypes": [
          "application/json"
        ],
        "StatusCode": 200
      },
      {
        "Type": "Microsoft.AspNetCore.Mvc.ProblemDetails",
        "MediaTypes": [
          "application/json"
        ],
        "StatusCode": 400
      },
      {
        "Type": "Microsoft.AspNetCore.Mvc.ProblemDetails",
        "MediaTypes": [
          "application/json"
        ],
        "StatusCode": 500
      }
    ]
  },
  {
    "ContainingType": "InfrastructureService.Controllers.MultiNetworkController",
    "Method": "GetNetworkConfigurationAsync",
    "RelativePath": "api/MultiNetwork/networks/{networkType}/configuration",
    "HttpMethod": "GET",
    "IsController": true,
    "Order": 0,
    "Parameters": [
      {
        "Name": "networkType",
        "Type": "System.String",
        "IsRequired": true
      }
    ],
    "ReturnTypes": [
      {
        "Type": "InfrastructureService.Models.Responses.NetworkConfiguration",
        "MediaTypes": [
          "application/json"
        ],
        "StatusCode": 200
      },
      {
        "Type": "Microsoft.AspNetCore.Mvc.ProblemDetails",
        "MediaTypes": [
          "application/json"
        ],
        "StatusCode": 400
      },
      {
        "Type": "Microsoft.AspNetCore.Mvc.ProblemDetails",
        "MediaTypes": [
          "application/json"
        ],
        "StatusCode": 500
      }
    ]
  },
  {
    "ContainingType": "InfrastructureService.Controllers.MultiNetworkController",
    "Method": "GetNetworkHealthStatusAsync",
    "RelativePath": "api/MultiNetwork/networks/health",
    "HttpMethod": "GET",
    "IsController": true,
    "Order": 0,
    "Parameters": [],
    "ReturnTypes": [
      {
        "Type": "System.Collections.Generic.Dictionary\u00602[[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[InfrastructureService.Services.Interfaces.NetworkHealthStatus, InfrastructureService, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]",
        "MediaTypes": [
          "application/json"
        ],
        "StatusCode": 200
      },
      {
        "Type": "Microsoft.AspNetCore.Mvc.ProblemDetails",
        "MediaTypes": [
          "application/json"
        ],
        "StatusCode": 500
      }
    ]
  },
  {
    "ContainingType": "InfrastructureService.Controllers.MultiNetworkController",
    "Method": "GetSupportedNetworksAsync",
    "RelativePath": "api/MultiNetwork/networks/supported",
    "HttpMethod": "GET",
    "IsController": true,
    "Order": 0,
    "Parameters": [],
    "ReturnTypes": [
      {
        "Type": "System.Collections.Generic.List\u00601[[InfrastructureService.Services.Interfaces.SupportedNetwork, InfrastructureService, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]",
        "MediaTypes": [
          "application/json"
        ],
        "StatusCode": 200
      },
      {
        "Type": "Microsoft.AspNetCore.Mvc.ProblemDetails",
        "MediaTypes": [
          "application/json"
        ],
        "StatusCode": 500
      }
    ]
  },
  {
    "ContainingType": "InfrastructureService.Controllers.MultiNetworkController",
    "Method": "GetMultiNetworkOverviewAsync",
    "RelativePath": "api/MultiNetwork/overview",
    "HttpMethod": "GET",
    "IsController": true,
    "Order": 0,
    "Parameters": [],
    "ReturnTypes": [
      {
        "Type": "InfrastructureService.Controllers.MultiNetworkOverviewResponse",
        "MediaTypes": [
          "application/json"
        ],
        "StatusCode": 200
      },
      {
        "Type": "Microsoft.AspNetCore.Mvc.ProblemDetails",
        "MediaTypes": [
          "application/json"
        ],
        "StatusCode": 500
      }
    ]
  },
  {
    "ContainingType": "InfrastructureService.Controllers.MultiNetworkController",
    "Method": "CompareNetworkPerformanceAsync",
    "RelativePath": "api/MultiNetwork/performance/compare",
    "HttpMethod": "POST",
    "IsController": true,
    "Order": 0,
    "Parameters": [
      {
        "Name": "request",
        "Type": "InfrastructureService.Models.Requests.NetworkPerformanceComparisonRequest",
        "IsRequired": true
      }
    ],
    "ReturnTypes": [
      {
        "Type": "InfrastructureService.Models.Responses.NetworkPerformanceComparisonResponse",
        "MediaTypes": [
          "application/json"
        ],
        "StatusCode": 200
      },
      {
        "Type": "Microsoft.AspNetCore.Mvc.ProblemDetails",
        "MediaTypes": [
          "application/json"
        ],
        "StatusCode": 400
      },
      {
        "Type": "Microsoft.AspNetCore.Mvc.ProblemDetails",
        "MediaTypes": [
          "application/json"
        ],
        "StatusCode": 500
      }
    ]
  },
  {
    "ContainingType": "InfrastructureService.Controllers.MultiNetworkController",
    "Method": "RunMultiNetworkTestAsync",
    "RelativePath": "api/MultiNetwork/test",
    "HttpMethod": "POST",
    "IsController": true,
    "Order": 0,
    "Parameters": [
      {
        "Name": "request",
        "Type": "InfrastructureService.Models.Requests.MultiNetworkTestRequest",
        "IsRequired": true
      }
    ],
    "ReturnTypes": [
      {
        "Type": "InfrastructureService.Models.Responses.MultiNetworkTestResponse",
        "MediaTypes": [
          "application/json"
        ],
        "StatusCode": 200
      },
      {
        "Type": "Microsoft.AspNetCore.Mvc.ProblemDetails",
        "MediaTypes": [
          "application/json"
        ],
        "StatusCode": 400
      },
      {
        "Type": "Microsoft.AspNetCore.Mvc.ProblemDetails",
        "MediaTypes": [
          "application/json"
        ],
        "StatusCode": 500
      }
    ]
  },
  {
    "ContainingType": "InfrastructureService.Controllers.MultiNetworkController",
    "Method": "ValidateMultiNetworkAddressesAsync",
    "RelativePath": "api/MultiNetwork/validate",
    "HttpMethod": "POST",
    "IsController": true,
    "Order": 0,
    "Parameters": [
      {
        "Name": "request",
        "Type": "InfrastructureService.Models.Requests.MultiNetworkValidateRequest",
        "IsRequired": true
      }
    ],
    "ReturnTypes": [
      {
        "Type": "InfrastructureService.Models.Responses.MultiNetworkValidateResponse",
        "MediaTypes": [
          "application/json"
        ],
        "StatusCode": 200
      },
      {
        "Type": "Microsoft.AspNetCore.Mvc.ProblemDetails",
        "MediaTypes": [
          "application/json"
        ],
        "StatusCode": 400
      },
      {
        "Type": "Microsoft.AspNetCore.Mvc.ProblemDetails",
        "MediaTypes": [
          "application/json"
        ],
        "StatusCode": 500
      }
    ]
  },
  {
    "ContainingType": "InfrastructureService.Controllers.ServiceRegistrationController",
    "Method": "BulkRegisterServices",
    "RelativePath": "api/ServiceRegistration/bulk-register",
    "HttpMethod": "POST",
    "IsController": true,
    "Order": 0,
    "Parameters": [
      {
        "Name": "request",
        "Type": "InfrastructureService.Models.Requests.BulkRegistrationRequest",
        "IsRequired": true
      }
    ],
    "ReturnTypes": [
      {
        "Type": "InfrastructureService.Models.Responses.BulkRegistrationResponse",
        "MediaTypes": [
          "text/plain",
          "application/json",
          "text/json"
        ],
        "StatusCode": 200
      }
    ]
  },
  {
    "ContainingType": "InfrastructureService.Controllers.ServiceRegistrationController",
    "Method": "RegisterService",
    "RelativePath": "api/ServiceRegistration/register",
    "HttpMethod": "POST",
    "IsController": true,
    "Order": 0,
    "Parameters": [
      {
        "Name": "request",
        "Type": "InfrastructureService.Models.Requests.ServiceRegistrationRequest",
        "IsRequired": true
      }
    ],
    "ReturnTypes": [
      {
        "Type": "InfrastructureService.Models.Responses.ServiceRegistrationResponse",
        "MediaTypes": [
          "text/plain",
          "application/json",
          "text/json"
        ],
        "StatusCode": 200
      }
    ]
  },
  {
    "ContainingType": "InfrastructureService.Controllers.ServiceRegistrationController",
    "Method": "GetAllServices",
    "RelativePath": "api/ServiceRegistration/services",
    "HttpMethod": "GET",
    "IsController": true,
    "Order": 0,
    "Parameters": [],
    "ReturnTypes": [
      {
        "Type": "System.Collections.Generic.List\u00601[[InfrastructureService.Models.Responses.ServiceSummaryResponse, InfrastructureService, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]",
        "MediaTypes": [
          "text/plain",
          "application/json",
          "text/json"
        ],
        "StatusCode": 200
      }
    ]
  },
  {
    "ContainingType": "InfrastructureService.Controllers.ServiceRegistrationController",
    "Method": "GetServiceRegistration",
    "RelativePath": "api/ServiceRegistration/services/{serviceName}",
    "HttpMethod": "GET",
    "IsController": true,
    "Order": 0,
    "Parameters": [
      {
        "Name": "serviceName",
        "Type": "System.String",
        "IsRequired": true
      }
    ],
    "ReturnTypes": [
      {
        "Type": "InfrastructureService.Models.Responses.ServiceRegistrationResponse",
        "MediaTypes": [
          "text/plain",
          "application/json",
          "text/json"
        ],
        "StatusCode": 200
      }
    ]
  },
  {
    "ContainingType": "InfrastructureService.Controllers.ServiceRegistrationController",
    "Method": "UpdateServiceHealth",
    "RelativePath": "api/ServiceRegistration/services/{serviceName}/health",
    "HttpMethod": "POST",
    "IsController": true,
    "Order": 0,
    "Parameters": [
      {
        "Name": "serviceName",
        "Type": "System.String",
        "IsRequired": true
      },
      {
        "Name": "request",
        "Type": "InfrastructureService.Models.Requests.ServiceHealthUpdateRequest",
        "IsRequired": true
      }
    ],
    "ReturnTypes": []
  },
  {
    "ContainingType": "InfrastructureService.Controllers.ServiceRegistrationController",
    "Method": "RotateServiceKeys",
    "RelativePath": "api/ServiceRegistration/services/{serviceName}/rotate-keys",
    "HttpMethod": "POST",
    "IsController": true,
    "Order": 0,
    "Parameters": [
      {
        "Name": "serviceName",
        "Type": "System.String",
        "IsRequired": true
      },
      {
        "Name": "request",
        "Type": "InfrastructureService.Models.Requests.KeyRotationRequest",
        "IsRequired": true
      }
    ],
    "ReturnTypes": [
      {
        "Type": "InfrastructureService.Models.Responses.KeyRotationResponse",
        "MediaTypes": [
          "text/plain",
          "application/json",
          "text/json"
        ],
        "StatusCode": 200
      }
    ]
  },
  {
    "ContainingType": "InfrastructureService.Controllers.SignatureValidationController",
    "Method": "GetSupportedAlgorithmsAsync",
    "RelativePath": "api/SignatureValidation/algorithms",
    "HttpMethod": "GET",
    "IsController": true,
    "Order": 0,
    "Parameters": [],
    "ReturnTypes": [
      {
        "Type": "System.Collections.Generic.List\u00601[[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]",
        "MediaTypes": [
          "application/json"
        ],
        "StatusCode": 200
      },
      {
        "Type": "System.Void",
        "MediaTypes": [],
        "StatusCode": 500
      }
    ]
  },
  {
    "ContainingType": "InfrastructureService.Controllers.SignatureValidationController",
    "Method": "BulkGenerateSignaturesAsync",
    "RelativePath": "api/SignatureValidation/bulk-generate",
    "HttpMethod": "POST",
    "IsController": true,
    "Order": 0,
    "Parameters": [
      {
        "Name": "request",
        "Type": "InfrastructureService.Models.Requests.BulkGenerateSignatureRequest",
        "IsRequired": true
      }
    ],
    "ReturnTypes": [
      {
        "Type": "InfrastructureService.Models.Responses.BulkGenerateSignatureResponse",
        "MediaTypes": [
          "application/json"
        ],
        "StatusCode": 200
      },
      {
        "Type": "Microsoft.AspNetCore.Mvc.ProblemDetails",
        "MediaTypes": [
          "application/json"
        ],
        "StatusCode": 400
      },
      {
        "Type": "System.Void",
        "MediaTypes": [],
        "StatusCode": 500
      }
    ]
  },
  {
    "ContainingType": "InfrastructureService.Controllers.SignatureValidationController",
    "Method": "CheckNonceAsync",
    "RelativePath": "api/SignatureValidation/check-nonce",
    "HttpMethod": "POST",
    "IsController": true,
    "Order": 0,
    "Parameters": [
      {
        "Name": "request",
        "Type": "InfrastructureService.Models.Requests.CheckNonceRequest",
        "IsRequired": true
      }
    ],
    "ReturnTypes": [
      {
        "Type": "InfrastructureService.Models.Responses.CheckNonceResponse",
        "MediaTypes": [
          "application/json"
        ],
        "StatusCode": 200
      },
      {
        "Type": "Microsoft.AspNetCore.Mvc.ProblemDetails",
        "MediaTypes": [
          "application/json"
        ],
        "StatusCode": 400
      },
      {
        "Type": "System.Void",
        "MediaTypes": [],
        "StatusCode": 500
      }
    ]
  },
  {
    "ContainingType": "InfrastructureService.Controllers.SignatureValidationController",
    "Method": "ClearExpiredNoncesAsync",
    "RelativePath": "api/SignatureValidation/clear-expired-nonces",
    "HttpMethod": "POST",
    "IsController": true,
    "Order": 0,
    "Parameters": [
      {
        "Name": "maxAgeHours",
        "Type": "System.Int32",
        "IsRequired": false
      }
    ],
    "ReturnTypes": [
      {
        "Type": "System.Int32",
        "MediaTypes": [
          "application/json"
        ],
        "StatusCode": 200
      },
      {
        "Type": "Microsoft.AspNetCore.Mvc.ProblemDetails",
        "MediaTypes": [
          "application/json"
        ],
        "StatusCode": 400
      },
      {
        "Type": "System.Void",
        "MediaTypes": [],
        "StatusCode": 500
      }
    ]
  },
  {
    "ContainingType": "InfrastructureService.Controllers.SignatureValidationController",
    "Method": "GenerateSignatureAsync",
    "RelativePath": "api/SignatureValidation/generate",
    "HttpMethod": "POST",
    "IsController": true,
    "Order": 0,
    "Parameters": [
      {
        "Name": "request",
        "Type": "InfrastructureService.Models.Requests.GenerateSignatureRequest",
        "IsRequired": true
      }
    ],
    "ReturnTypes": [
      {
        "Type": "InfrastructureService.Models.Responses.GenerateSignatureResponse",
        "MediaTypes": [
          "application/json"
        ],
        "StatusCode": 200
      },
      {
        "Type": "Microsoft.AspNetCore.Mvc.ProblemDetails",
        "MediaTypes": [
          "application/json"
        ],
        "StatusCode": 400
      },
      {
        "Type": "Microsoft.AspNetCore.Mvc.ProblemDetails",
        "MediaTypes": [
          "application/json"
        ],
        "StatusCode": 404
      },
      {
        "Type": "System.Void",
        "MediaTypes": [],
        "StatusCode": 500
      }
    ]
  },
  {
    "ContainingType": "InfrastructureService.Controllers.SignatureValidationController",
    "Method": "GenerateNonceAsync",
    "RelativePath": "api/SignatureValidation/generate-nonce",
    "HttpMethod": "POST",
    "IsController": true,
    "Order": 0,
    "Parameters": [
      {
        "Name": "serviceName",
        "Type": "System.String",
        "IsRequired": true
      }
    ],
    "ReturnTypes": [
      {
        "Type": "System.String",
        "MediaTypes": [
          "application/json"
        ],
        "StatusCode": 200
      },
      {
        "Type": "Microsoft.AspNetCore.Mvc.ProblemDetails",
        "MediaTypes": [
          "application/json"
        ],
        "StatusCode": 400
      },
      {
        "Type": "System.Void",
        "MediaTypes": [],
        "StatusCode": 500
      }
    ]
  },
  {
    "ContainingType": "InfrastructureService.Controllers.SignatureValidationController",
    "Method": "GetHealthStatusAsync",
    "RelativePath": "api/SignatureValidation/health",
    "HttpMethod": "GET",
    "IsController": true,
    "Order": 0,
    "Parameters": [],
    "ReturnTypes": [
      {
        "Type": "System.Collections.Generic.Dictionary\u00602[[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Object, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]",
        "MediaTypes": [
          "application/json"
        ],
        "StatusCode": 200
      },
      {
        "Type": "System.Void",
        "MediaTypes": [],
        "StatusCode": 500
      }
    ]
  },
  {
    "ContainingType": "InfrastructureService.Controllers.SignatureValidationController",
    "Method": "GetSignatureMetricsAsync",
    "RelativePath": "api/SignatureValidation/metrics",
    "HttpMethod": "GET",
    "IsController": true,
    "Order": 0,
    "Parameters": [
      {
        "Name": "serviceName",
        "Type": "System.String",
        "IsRequired": false
      },
      {
        "Name": "algorithm",
        "Type": "System.String",
        "IsRequired": false
      },
      {
        "Name": "startDate",
        "Type": "System.Nullable\u00601[[System.DateTime, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]",
        "IsRequired": false
      },
      {
        "Name": "endDate",
        "Type": "System.Nullable\u00601[[System.DateTime, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]",
        "IsRequired": false
      }
    ],
    "ReturnTypes": [
      {
        "Type": "InfrastructureService.Models.Responses.SignatureMetricsResponse",
        "MediaTypes": [
          "application/json"
        ],
        "StatusCode": 200
      },
      {
        "Type": "Microsoft.AspNetCore.Mvc.ProblemDetails",
        "MediaTypes": [
          "application/json"
        ],
        "StatusCode": 400
      },
      {
        "Type": "System.Void",
        "MediaTypes": [],
        "StatusCode": 500
      }
    ]
  },
  {
    "ContainingType": "InfrastructureService.Controllers.SignatureValidationController",
    "Method": "SystemTestAsync",
    "RelativePath": "api/SignatureValidation/system-test",
    "HttpMethod": "POST",
    "IsController": true,
    "Order": 0,
    "Parameters": [
      {
        "Name": "serviceName",
        "Type": "System.String",
        "IsRequired": false
      }
    ],
    "ReturnTypes": [
      {
        "Type": "System.Collections.Generic.Dictionary\u00602[[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Object, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]",
        "MediaTypes": [
          "application/json"
        ],
        "StatusCode": 200
      },
      {
        "Type": "Microsoft.AspNetCore.Mvc.ProblemDetails",
        "MediaTypes": [
          "application/json"
        ],
        "StatusCode": 400
      },
      {
        "Type": "System.Void",
        "MediaTypes": [],
        "StatusCode": 500
      }
    ]
  },
  {
    "ContainingType": "InfrastructureService.Controllers.SignatureValidationController",
    "Method": "ValidateSignatureAsync",
    "RelativePath": "api/SignatureValidation/validate",
    "HttpMethod": "POST",
    "IsController": true,
    "Order": 0,
    "Parameters": [
      {
        "Name": "request",
        "Type": "InfrastructureService.Models.Requests.ValidateSignatureRequest",
        "IsRequired": true
      }
    ],
    "ReturnTypes": [
      {
        "Type": "InfrastructureService.Models.Responses.ValidateSignatureResponse",
        "MediaTypes": [
          "application/json"
        ],
        "StatusCode": 200
      },
      {
        "Type": "Microsoft.AspNetCore.Mvc.ProblemDetails",
        "MediaTypes": [
          "application/json"
        ],
        "StatusCode": 400
      },
      {
        "Type": "System.Void",
        "MediaTypes": [],
        "StatusCode": 500
      }
    ]
  },
  {
    "ContainingType": "InfrastructureService.Controllers.SignatureValidationController",
    "Method": "ValidateServiceReadinessAsync",
    "RelativePath": "api/SignatureValidation/validate-service-readiness",
    "HttpMethod": "GET",
    "IsController": true,
    "Order": 0,
    "Parameters": [
      {
        "Name": "serviceName",
        "Type": "System.String",
        "IsRequired": false
      },
      {
        "Name": "algorithm",
        "Type": "System.String",
        "IsRequired": false
      }
    ],
    "ReturnTypes": [
      {
        "Type": "System.Boolean",
        "MediaTypes": [
          "application/json"
        ],
        "StatusCode": 200
      },
      {
        "Type": "Microsoft.AspNetCore.Mvc.ProblemDetails",
        "MediaTypes": [
          "application/json"
        ],
        "StatusCode": 400
      },
      {
        "Type": "System.Void",
        "MediaTypes": [],
        "StatusCode": 500
      }
    ]
  },
  {
    "ContainingType": "InfrastructureService.Controllers.VolumeTestingController",
    "Method": "GetVolumeTestResults",
    "RelativePath": "api/VolumeTesting/{testId}/results",
    "HttpMethod": "GET",
    "IsController": true,
    "Order": 0,
    "Parameters": [
      {
        "Name": "testId",
        "Type": "System.String",
        "IsRequired": true
      },
      {
        "Name": "includeDetailedMetrics",
        "Type": "System.Boolean",
        "IsRequired": false
      },
      {
        "Name": "includeSamples",
        "Type": "System.Boolean",
        "IsRequired": false
      },
      {
        "Name": "sampleCount",
        "Type": "System.Int32",
        "IsRequired": false
      }
    ],
    "ReturnTypes": [
      {
        "Type": "InfrastructureService.Models.Responses.VolumeTestResultsResponse",
        "MediaTypes": [
          "application/json"
        ],
        "StatusCode": 200
      }
    ]
  },
  {
    "ContainingType": "InfrastructureService.Controllers.VolumeTestingController",
    "Method": "GetVolumeTestStatus",
    "RelativePath": "api/VolumeTesting/{testId}/status",
    "HttpMethod": "GET",
    "IsController": true,
    "Order": 0,
    "Parameters": [
      {
        "Name": "testId",
        "Type": "System.String",
        "IsRequired": true
      }
    ],
    "ReturnTypes": [
      {
        "Type": "InfrastructureService.Models.Responses.VolumeTestStatusResponse",
        "MediaTypes": [
          "application/json"
        ],
        "StatusCode": 200
      }
    ]
  },
  {
    "ContainingType": "InfrastructureService.Controllers.VolumeTestingController",
    "Method": "StopVolumeTest",
    "RelativePath": "api/VolumeTesting/{testId}/stop",
    "HttpMethod": "POST",
    "IsController": true,
    "Order": 0,
    "Parameters": [
      {
        "Name": "testId",
        "Type": "System.String",
        "IsRequired": true
      },
      {
        "Name": "request",
        "Type": "InfrastructureService.Models.Requests.StopVolumeTestRequest",
        "IsRequired": true
      }
    ],
    "ReturnTypes": []
  },
  {
    "ContainingType": "InfrastructureService.Controllers.VolumeTestingController",
    "Method": "StartVolumeAddressTest",
    "RelativePath": "api/VolumeTesting/address-test",
    "HttpMethod": "POST",
    "IsController": true,
    "Order": 0,
    "Parameters": [
      {
        "Name": "request",
        "Type": "InfrastructureService.Models.Requests.StartVolumeAddressTestRequest",
        "IsRequired": true
      }
    ],
    "ReturnTypes": [
      {
        "Type": "InfrastructureService.Models.Responses.StartVolumeTestResponse",
        "MediaTypes": [
          "application/json"
        ],
        "StatusCode": 200
      }
    ]
  },
  {
    "ContainingType": "InfrastructureService.Controllers.VolumeTestingController",
    "Method": "CleanupOldTestData",
    "RelativePath": "api/VolumeTesting/cleanup",
    "HttpMethod": "DELETE",
    "IsController": true,
    "Order": 0,
    "Parameters": [
      {
        "Name": "maxAgeDays",
        "Type": "System.Int32",
        "IsRequired": false
      }
    ],
    "ReturnTypes": []
  },
  {
    "ContainingType": "InfrastructureService.Controllers.VolumeTestingController",
    "Method": "EstimateTestCompletionTime",
    "RelativePath": "api/VolumeTesting/estimate",
    "HttpMethod": "GET",
    "IsController": true,
    "Order": 0,
    "Parameters": [
      {
        "Name": "operationCount",
        "Type": "System.Int64",
        "IsRequired": false
      },
      {
        "Name": "operationType",
        "Type": "System.String",
        "IsRequired": false
      },
      {
        "Name": "parallelWorkers",
        "Type": "System.Int32",
        "IsRequired": false
      }
    ],
    "ReturnTypes": []
  },
  {
    "ContainingType": "InfrastructureService.Controllers.VolumeTestingController",
    "Method": "GetHealth",
    "RelativePath": "api/VolumeTesting/health",
    "HttpMethod": "GET",
    "IsController": true,
    "Order": 0,
    "Parameters": [],
    "ReturnTypes": []
  },
  {
    "ContainingType": "InfrastructureService.Controllers.VolumeTestingController",
    "Method": "GetRecommendedTestParameters",
    "RelativePath": "api/VolumeTesting/recommendations",
    "HttpMethod": "GET",
    "IsController": true,
    "Order": 0,
    "Parameters": [
      {
        "Name": "targetOperations",
        "Type": "System.Int64",
        "IsRequired": false
      },
      {
        "Name": "operationType",
        "Type": "System.String",
        "IsRequired": false
      }
    ],
    "ReturnTypes": [
      {
        "Type": "System.Collections.Generic.Dictionary\u00602[[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Object, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]",
        "MediaTypes": [
          "application/json"
        ],
        "StatusCode": 200
      }
    ]
  },
  {
    "ContainingType": "InfrastructureService.Controllers.VolumeTestingController",
    "Method": "StartVolumeSignatureTest",
    "RelativePath": "api/VolumeTesting/signature-test",
    "HttpMethod": "POST",
    "IsController": true,
    "Order": 0,
    "Parameters": [
      {
        "Name": "request",
        "Type": "InfrastructureService.Models.Requests.StartVolumeSignatureTestRequest",
        "IsRequired": true
      }
    ],
    "ReturnTypes": [
      {
        "Type": "InfrastructureService.Models.Responses.StartVolumeTestResponse",
        "MediaTypes": [
          "application/json"
        ],
        "StatusCode": 200
      }
    ]
  },
  {
    "ContainingType": "InfrastructureService.Controllers.VolumeTestingController",
    "Method": "StartStressTest",
    "RelativePath": "api/VolumeTesting/stress-test",
    "HttpMethod": "POST",
    "IsController": true,
    "Order": 0,
    "Parameters": [
      {
        "Name": "request",
        "Type": "InfrastructureService.Models.Requests.StartStressTestRequest",
        "IsRequired": true
      }
    ],
    "ReturnTypes": [
      {
        "Type": "InfrastructureService.Models.Responses.StartVolumeTestResponse",
        "MediaTypes": [
          "application/json"
        ],
        "StatusCode": 200
      }
    ]
  },
  {
    "ContainingType": "InfrastructureService.Controllers.VolumeTestingController",
    "Method": "RunSystemTest",
    "RelativePath": "api/VolumeTesting/system-test",
    "HttpMethod": "POST",
    "IsController": true,
    "Order": 0,
    "Parameters": [],
    "ReturnTypes": []
  },
  {
    "ContainingType": "InfrastructureService.Controllers.VolumeTestingController",
    "Method": "GetSystemPerformanceMetrics",
    "RelativePath": "api/VolumeTesting/system/performance",
    "HttpMethod": "GET",
    "IsController": true,
    "Order": 0,
    "Parameters": [],
    "ReturnTypes": [
      {
        "Type": "InfrastructureService.Models.Responses.ResourceUtilization",
        "MediaTypes": [
          "application/json"
        ],
        "StatusCode": 200
      }
    ]
  },
  {
    "ContainingType": "InfrastructureService.Controllers.VolumeTestingController",
    "Method": "ValidateSystemReadiness",
    "RelativePath": "api/VolumeTesting/system/readiness",
    "HttpMethod": "GET",
    "IsController": true,
    "Order": 0,
    "Parameters": [],
    "ReturnTypes": [
      {
        "Type": "System.Collections.Generic.Dictionary\u00602[[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Object, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]",
        "MediaTypes": [
          "application/json"
        ],
        "StatusCode": 200
      }
    ]
  },
  {
    "ContainingType": "InfrastructureService.Controllers.VolumeTestingController",
    "Method": "GetAllVolumeTests",
    "RelativePath": "api/VolumeTesting/tests",
    "HttpMethod": "GET",
    "IsController": true,
    "Order": 0,
    "Parameters": [],
    "ReturnTypes": [
      {
        "Type": "System.Collections.Generic.List\u00601[[InfrastructureService.Models.Responses.VolumeTestSummary, InfrastructureService, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]",
        "MediaTypes": [
          "application/json"
        ],
        "StatusCode": 200
      }
    ]
  }
]